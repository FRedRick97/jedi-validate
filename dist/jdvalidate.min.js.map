{"version":3,"sources":["jdvalidate.js"],"names":["$","methods","fn","jdvalidate","options","defaultOptions","ajax","dataType","sendType","classes","error","baseError","valid","clean","rules","messages","extend","this","each","form","ajaxOptions","baseErrorLabel","addClass","hide","prepend","attr","errorLabels","inputs","find","input","name","required","is","hasClass","email","on","checkInput","markError","errors","after","removeClass","text","join","show","markValid","isValid","method","params","func","val","message","push","console","length","checkForm","event","preventDefault","url","processData","data","FormData","get","element","JSON","stringify","serialize","done","response","validationErrors","base","redirect","window","location","replace","reset","fail","log","addMethod","rule","value","trim","regexp","test","size","files","extensions","indexOf","split","pop","jQuery"],"mappings":"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","file":"jdvalidate.min.js","sourcesContent":["(function ($) {\n\tvar methods = {};\n\n\t$.fn.jdvalidate = function (options) {\n\t\tvar defaultOptions = {\n\t\t\tajax: {\n\t\t\t\tdataType: 'json'\n\t\t\t},\n\t\t\tsendType: 'serialize',\n\t\t\tclasses: {\n\t\t\t\terror: \"error\",\n\t\t\t\tbaseError: \"base-error\",\n\t\t\t\tvalid: \"valid\"\n\t\t\t},\n\t\t\tclean: true,\n\t\t\trules: {},\n\t\t\tmessages: {},\n\t\t\tbaseError: null\n\t\t};\n\n\t\toptions = $.extend(defaultOptions, options);\n\n\t\treturn this.each(function () {\n\t\t\tform = $(this);\n\n\t\t\tvar ajaxOptions = {};\n\t\t\tvar baseErrorLabel = options.baseError ? options.baseError : $('<div></div>')\n\t\t\t\t.addClass(options.classes.baseError)\n\t\t\t\t.addClass(options.classes.error)\n\t\t\t\t.hide();\n\n\t\t\tif (!options.baseError) {\n\t\t\t\tform.prepend(baseErrorLabel);\n\t\t\t}\n\n\t\t\tform.attr('novalidate', 'true');\n\n\t\t\tvar errorLabels = {};\n\t\t\tvar inputs = {};\n\n\t\t\tform.find('[name]')\n\t\t\t\t.each(function () {\n\t\t\t\t\tvar input = $(this);\n\t\t\t\t\tvar name = input.attr('name');\n\n\t\t\t\t\tinputs[ name ] = input;\n\n\t\t\t\t\toptions.rules[ name ] = options.rules[ name ] || {};\n\n\t\t\t\t\toptions.rules[ name ].required = input.is('[required]') || input.hasClass('required');\n\t\t\t\t\toptions.rules[ name ].email = input.is('[type=\"email\"]') || input.hasClass('email');\n\t\t\t\t})\n\t\t\t\t.on('change', function () {\n\t\t\t\t\tvar name = $(this).attr('name');\n\n\t\t\t\t\tcheckInput(name, options.rules[ name ]);\n\t\t\t\t});\n\n\t\t\tvar markError = function (name, errors) {\n\t\t\t\tif (!errorLabels[ name ]) {\n\t\t\t\t\terrorLabels[ name ] = $('<label></label>')\n\t\t\t\t\t\t.attr('for', name)\n\t\t\t\t\t\t.addClass(options.classes.error);\n\n\t\t\t\t\tinputs[ name ].after(errorLabels[ name ]);\n\t\t\t\t}\n\n\t\t\t\tinputs[ name ]\n\t\t\t\t\t.addClass(options.classes.error)\n\t\t\t\t\t.removeClass(options.classes.valid);\n\n\t\t\t\terrorLabels[ name ].text(errors.join(', ')).show();\n\t\t\t};\n\n\t\t\tvar markValid = function (name) {\n\t\t\t\tinputs[ name ]\n\t\t\t\t\t.removeClass(options.classes.error)\n\t\t\t\t\t.addClass(options.classes.valid);\n\n\t\t\t\tif (errorLabels[ name ]) {\n\t\t\t\t\terrorLabels[ name ].hide();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar checkInput = function (name, rules) {\n\t\t\t\tvar isValid = true;\n\n\t\t\t\tvar errors = [];\n\n\t\t\t\t$.each(rules, function (method, params) {\n\t\t\t\t\tif (params) {\n\t\t\t\t\t\tif (methods[ method ]) {\n\t\t\t\t\t\t\tvar valid = methods[ method ].func(inputs[ name ].val(), inputs[ name ], params);\n\n\t\t\t\t\t\t\tif (!valid) {\n\t\t\t\t\t\t\t\tvar message = options.messages[ name ] ? options.messages[ name ][ method ] ? options.messages[ name ][ method ] : methods[ method ].message : methods[ method ].message;\n\t\t\t\t\t\t\t\terrors.push(message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.error('Method \"' + method + '\" not found');\n\t\t\t\t\t\t\terrors.push('Method \"' + method + '\" not found');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (errors.length) {\n\t\t\t\t\tmarkError(name, errors);\n\n\t\t\t\t\tisValid = false;\n\t\t\t\t} else {\n\t\t\t\t\tmarkValid(name);\n\t\t\t\t}\n\n\t\t\t\treturn isValid;\n\t\t\t};\n\n\t\t\tvar checkForm = function () {\n\t\t\t\tvar isValid = true;\n\n\t\t\t\t$.each(options.rules, function (name, rules) {\n\t\t\t\t\tisValid = checkInput(name, rules) && isValid;\n\t\t\t\t});\n\n\t\t\t\treturn isValid;\n\t\t\t};\n\n\t\t\tform.on('submit', function (event) {\n\t\t\t\tif (!checkForm()) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!options.ajax) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tajaxOptions.url = form.attr('action');\n\t\t\t\tajaxOptions.method = form.attr('method');\n\n\t\t\t\tif (options.sendType === \"formData\") {\n\t\t\t\t\tajaxOptions.processData = false;\n\t\t\t\t\tajaxOptions.data = new FormData(form.get(0));\n\t\t\t\t} else if (options.sendType === \"json\") {\n\t\t\t\t\tvar data = {};\n\n\t\t\t\t\t$.each(inputs, function (name, element) {\n\t\t\t\t\t\tdata[ name ] = element.val();\n\t\t\t\t\t});\n\n\t\t\t\t\tajaxOptions.data = JSON.stringify(data);\n\t\t\t\t} else if (options.sendType === \"serialize\") {\n\t\t\t\t\tajaxOptions.data = form.serialize();\n\t\t\t\t}\n\n\t\t\t\tajaxOptions = $.extend(ajaxOptions, options.ajax);\n\n\t\t\t\t$.each(errorLabels, markValid);\n\n\t\t\t\t$.ajax(ajaxOptions)\n\t\t\t\t\t.done(function (response) {\n\t\t\t\t\t\tif (response.validationErrors) {\n\t\t\t\t\t\t\t$.each(inputs, function (name) {\n\t\t\t\t\t\t\t\tif (errorLabels[ name ] && !response.validationErrors[ name ]) {\n\t\t\t\t\t\t\t\t\terrorLabels[ name ].hide();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (response.validationErrors.base) {\n\t\t\t\t\t\t\t\tbaseErrorLabel.text(response.validationErrors.base.join(', ')).show();\n\n\t\t\t\t\t\t\t\tdelete response.validationErrors.base;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbaseErrorLabel.hide();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$.each(response.validationErrors, markError);\n\t\t\t\t\t\t} else if (response.redirect) {\n\t\t\t\t\t\t\twindow.location.replace(response.redirect);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (options.clean) {\n\t\t\t\t\t\t\t\tform.get(0).reset();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}).fail(function (response) {\n\t\t\t\t\t\tconsole.log(response);\n\t\t\t\t\t});\n\t\t\t});\n\t\t});\n\t};\n\n\t$.jdvalidate = {};\n\n\t$.jdvalidate.addMethod = function (rule, func, message) {\n\t\tmethods[ rule ] = {\n\t\t\tfunc: func,\n\t\t\tmessage: message\n\t\t};\n\t};\n\n\t/**\n\t * Standart validation methods\n\t */\n\n\t$.jdvalidate.addMethod(\"required\", function (value, element) {\n\t\treturn (value.trim() != '' && !element.is('[type=\"checkbox\"]')) || (element.is('[type=\"checkbox\"]') && element.is(':checked'));\n\t}, \"Field is required\");\n\n\t$.jdvalidate.addMethod(\"regexp\", function (value, element, regexp) {\n\t\treturn regexp.test(value);\n\t}, \"Please check your input.\");\n\n\t$.jdvalidate.addMethod(\"email\", function (value) {\n\t\treturn /[a-z]+@[a-z]+\\.[a-z]+/.test(value);\n\t}, \"Please check your e-mail.\");\n\n\t$.jdvalidate.addMethod('filesize', function (value, element, size) {\n\t\treturn !element.get(0).files[ 0 ] || element.get(0).files[ 0 ].size <= size;\n\t}, \"File too big\");\n\n\t$.jdvalidate.addMethod('extension', function (value, element, extensions) {\n\t\treturn !element.get(0).files[ 0 ] || extensions.indexOf(element.get(0).files[ 0 ].name.split('.').pop()) > -1;\n\t}, \"Extension is wrong\");\n})(jQuery);"],"sourceRoot":"/source/"}