{"version":3,"sources":["jdvalidate.js","methods.js"],"names":["$","methods","fn","jdvalidate","options","defaultOptions","ajax","dataType","sendType","classes","error","baseError","valid","clean","rules","messages","parent","self","extend","form","this","addClass","hide","prepend","attr","inputs","labels","find","each","input","name","required","is","hasClass","email","on","checkInput","event","checkForm","preventDefault","ajaxOptions","url","method","processData","data","FormData","get","element","val","JSON","stringify","serialize","markValid","done","response","validationErrors","base","text","join","show","markError","redirect","window","location","replace","reset","fail","status","statusText","console","errors","closest","selector","append","after","removeClass","isValid","isEmpty","func","message","push","params","length","addMethod","rule","jQuery","value","trim","regexp","test","size","files","extensions","indexOf","split","pop"],"mappings":"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","file":"jdvalidate.min.js","sourcesContent":["(function ($) {\n    var methods = {};\n\n    $.fn.jdvalidate = function (options) {\n        var defaultOptions = {\n            ajax: {\n                dataType: 'json'\n            },\n            sendType: 'serialize',\n            classes: {\n                error: 'error',\n                baseError: 'base-error',\n                valid: 'valid'\n            },\n            clean: true,\n            rules: {},\n            messages: {},\n            baseError: null,\n            parent: {}\n        };\n\n        var self = {};\n\n        self.options = $.extend(defaultOptions, options);\n\n        self.form = this;\n\n        self.baseError = self.options.baseError ? self.options.baseError : $('<div></div>')\n            .addClass(self.options.classes.baseError)\n            .addClass(self.options.classes.error)\n            .hide();\n\n        if (!self.options.baseError) {\n            self.form.prepend(self.baseError);\n        }\n\n        self.form.attr('novalidate', 'true');\n\n        self.inputs = {};\n        self.labels = {};\n        self.rules = {};\n\n        self.form.find('[name]')\n            .each(function () {\n                var input = $(this);\n                var name = input.attr('name');\n\n                self.inputs[name] = input;\n\n                self.rules[name] = self.options.rules[name] || {};\n\n                self.rules[name].required = input.is('[required]') || input.hasClass('required');\n                self.rules[name].email = input.is('[type=\"email\"]') || input.hasClass('email');\n            })\n            .on('change.jdvalidate', function () {\n                var name = $(this).attr('name');\n\n                self.checkInput(name, self.rules[name]);\n            });\n\n        self.form.on('submit.jdvalidate', function (event) {\n            if (!self.checkForm()) {\n                event.preventDefault();\n                return false;\n            }\n\n            if (!self.options.ajax) {\n                return false;\n            } else {\n                event.preventDefault();\n            }\n\n            var ajaxOptions = {};\n\n            ajaxOptions.url = self.form.attr('action');\n            ajaxOptions.method = self.form.attr('method');\n\n            if (self.options.sendType === 'formData') {\n                ajaxOptions.processData = false;\n                ajaxOptions.data = new FormData(self.form.get(0));\n            } else if (self.options.sendType === 'json') {\n                var data = {};\n\n                $.each(self.inputs, function (name, element) {\n                    data[name] = (element.is('[type=\"checkbox\"]') && element.is(':checked') || !element.is('[type=\"checkbox\"]')) ? element.val() : '';\n                });\n\n                ajaxOptions.data = JSON.stringify(data);\n            } else if (self.options.sendType === 'serialize') {\n                ajaxOptions.data = self.form.serialize();\n            }\n\n            ajaxOptions = $.extend(ajaxOptions, self.options.ajax);\n\n            $.each(self.labels, self.markValid);\n\n            $.ajax(ajaxOptions).done(function (response) {\n                if (response.validationErrors) {\n                    $.each(self.inputs, function (name) {\n                        if (self.labels[name] && !response.validationErrors[name]) {\n                            self.labels[name].hide();\n                        }\n                    });\n\n                    if (response.validationErrors.base) {\n                        self.baseError.text(response.validationErrors.base.join(', ')).show();\n\n                        delete response.validationErrors.base;\n                    } else {\n                        self.baseError.hide();\n                    }\n\n                    $.each(response.validationErrors, self.markError);\n                } else if (response.redirect) {\n                    window.location.replace(response.redirect);\n                } else {\n                    if (self.options.clean) {\n                        self.form.get(0).reset();\n                    }\n                }\n            }).fail(function (response) {\n                var error = ajaxOptions.method + ' ' + ajaxOptions.url + ' ' + response.status + ' (' + response.statusText + ')';\n\n                self.baseError.text(error).show();\n                console.error(error);\n            });\n        });\n\n        self.markError = function (name, errors) {\n            if (!self.labels[name]) {\n                self.labels[name] = $('<label></label>')\n                    .attr('for', name)\n                    .addClass(self.options.classes.error);\n\n                if (!self.options.parent) {\n                    self.inputs[name].after(self.labels[name]);\n                } else {\n                    self.inputs[name ].closest(self.options.parent.selector).append(self.labels[name]);\n                }\n            }\n\n            if (self.options.parent) {\n\t\t\t\tself.inputs[name ].closest(self.options.parent.selector)\n\t\t\t\t\t.addClass(self.options.parent.classes.error)\n\t\t\t\t\t.removeClass(self.options.parent.classes.valid);\n            }\n\n\t\t\tself.inputs[name]\n                .addClass(self.options.classes.error)\n                .removeClass(self.options.classes.valid);\n\n            self.labels[name].text(errors.join(', ')).show();\n        };\n\n        self.markValid = function (name) {\n            self.inputs[name]\n                .removeClass(self.options.classes.error)\n                .addClass(self.options.classes.valid);\n\n\t\t\tif (self.options.parent) {\n\t\t\t\tself.inputs[name ].closest(self.options.parent.selector)\n\t\t\t\t\t.addClass(self.options.parent.classes.valid)\n\t\t\t\t\t.removeClass(self.options.parent.classes.error);\n\t\t\t}\n\n            if (self.labels[name]) {\n                self.labels[name].hide();\n            }\n        };\n\n        self.checkInput = function (name, rules) {\n            var isValid = true;\n\n            var errors = [];\n\n            var isEmpty = !methods['required'].func(self.inputs[name].val(), self.inputs[name]);\n\n            if (isEmpty && rules['required']){\n\t\t\t\tvar message = self.options.messages[name] ? self.options.messages[name]['required'] ? self.options.messages[name]['required'] : methods['required'].message : methods['required'].message;\n\t\t\t\terrors.push(message);\n            } else if (!isEmpty) {\n                $.each(rules, function (method, params) {\n                    if (params) {\n                        if (methods[method]) {\n                            var valid = methods[method].func(self.inputs[name].val(), self.inputs[name], params);\n\n                            if (!valid) {\n                                var message = self.options.messages[name] ? self.options.messages[name][method] ? self.options.messages[name][method] : methods[method].message : methods[method].message;\n                                errors.push(message);\n                            }\n                        } else {\n                            console.error('Method \"' + method + '\" not found');\n                            errors.push('Method \"' + method + '\" not found');\n                        }\n                    }\n                });\n            }\n\n            if (errors.length) {\n                self.markError(name, errors);\n\n                isValid = false;\n            } else {\n                self.markValid(name);\n            }\n\n            return isValid;\n        };\n\n        self.checkForm = function () {\n            var isValid = true;\n\n            $.each(self.rules, function (name, rules) {\n                isValid = self.checkInput(name, rules) && isValid;\n            });\n\n\t\t\tself.baseError.text('').hide();\n\n            return isValid;\n        };\n\n        return self.form;\n    };\n\n    $.jdvalidate = {};\n\n    $.jdvalidate.addMethod = function (rule, func, message) {\n        methods[rule] = {\n            func: func,\n            message: message\n        };\n    };\n})(jQuery);","/**\n * Standart validation methods\n */\n\n(function ($) {\n    $.jdvalidate.addMethod('required', function (value, element) {\n        return (value.trim() != '' && !element.is('[type=\"checkbox\"]')) || (element.is('[type=\"checkbox\"]') && element.is(':checked'));\n    }, 'The field is required');\n\n    $.jdvalidate.addMethod('regexp', function (value, element, regexp) {\n        return regexp.test(value);\n    }, 'The field value is invalid');\n\n    $.jdvalidate.addMethod('email', function (value) {\n        return /[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value);\n    }, 'The e-mail is invalid');\n\n    $.jdvalidate.addMethod('filesize', function (value, element, size) {\n        return !element.get(0).files[0] || element.get(0).files[0].size <= size;\n    }, 'The file is too large');\n\n    $.jdvalidate.addMethod('extension', function (value, element, extensions) {\n        return !element.get(0).files[0] || extensions.indexOf(element.get(0).files[0].name.split('.').pop()) > -1;\n    }, 'The file extension is invalid');\n})(jQuery);"],"sourceRoot":"/source/"}