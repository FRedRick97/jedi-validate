{"version":3,"sources":["jdvalidate.js","methods.js"],"names":["$","methods","fn","jdvalidate","options","defaultOptions","ajax","dataType","sendType","classes","error","baseError","valid","clean","rules","messages","self","extend","form","this","addClass","hide","prepend","attr","inputs","labels","find","each","input","name","required","is","hasClass","email","on","checkInput","event","checkForm","preventDefault","ajaxOptions","url","method","processData","data","FormData","get","element","val","JSON","stringify","serialize","markValid","done","response","validationErrors","base","text","join","show","markError","redirect","window","location","replace","reset","fail","status","statusText","console","errors","after","removeClass","isValid","params","func","message","push","length","addMethod","rule","jQuery","value","trim","regexp","test","size","files","extensions","indexOf","split","pop"],"mappings":"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","file":"jdvalidate.min.js","sourcesContent":["(function ($) {\r\n    var methods = {};\r\n\r\n    $.fn.jdvalidate = function (options) {\r\n        var defaultOptions = {\r\n            ajax: {\r\n                dataType: 'json'\r\n            },\r\n            sendType: 'serialize',\r\n            classes: {\r\n                error: \"error\",\r\n                baseError: \"base-error\",\r\n                valid: \"valid\"\r\n            },\r\n            clean: true,\r\n            rules: {},\r\n            messages: {},\r\n            baseError: null\r\n        };\r\n\r\n        var self = {};\r\n\r\n        self.options = $.extend(defaultOptions, options);\r\n\r\n        self.form = this;\r\n\r\n        self.baseError = self.options.baseError ? self.options.baseError : $('<div></div>')\r\n            .addClass(self.options.classes.baseError)\r\n            .addClass(self.options.classes.error)\r\n            .hide();\r\n\r\n        if (!self.options.baseError) {\r\n            self.form.prepend(self.baseError);\r\n        }\r\n\r\n        self.form.attr('novalidate', 'true');\r\n\r\n        self.inputs = {};\r\n        self.labels = {};\r\n        self.rules = {};\r\n\r\n        self.form.find('[name]')\r\n            .each(function () {\r\n                var input = $(this);\r\n                var name = input.attr('name');\r\n\r\n                self.inputs[name] = input;\r\n\r\n                self.rules[name] = self.options.rules[name] || {};\r\n\r\n                self.rules[name].required = input.is('[required]') || input.hasClass('required');\r\n                self.rules[name].email = input.is('[type=\"email\"]') || input.hasClass('email');\r\n            })\r\n            .on('change.jdvalidate', function () {\r\n                var name = $(this).attr('name');\r\n\r\n                self.checkInput(name, self.rules[name]);\r\n            });\r\n\r\n        self.form.on('submit.jdvalidate', function (event) {\r\n            if (!self.checkForm()) {\r\n                event.preventDefault();\r\n                return false;\r\n            }\r\n\r\n            if (!self.options.ajax) {\r\n                return false;\r\n            } else {\r\n                event.preventDefault();\r\n            }\r\n\r\n            var ajaxOptions = {};\r\n\r\n            ajaxOptions.url = self.form.attr('action');\r\n            ajaxOptions.method = self.form.attr('method');\r\n\r\n            if (self.options.sendType === \"formData\") {\r\n                ajaxOptions.processData = false;\r\n                ajaxOptions.data = new FormData(self.form.get(0));\r\n            } else if (self.options.sendType === \"json\") {\r\n                var data = {};\r\n\r\n                $.each(self.inputs, function (name, element) {\r\n                    data[name] = element.val();\r\n                });\r\n\r\n                ajaxOptions.data = JSON.stringify(data);\r\n            } else if (self.options.sendType === \"serialize\") {\r\n                ajaxOptions.data = self.form.serialize();\r\n            }\r\n\r\n            ajaxOptions = $.extend(ajaxOptions, self.options.ajax);\r\n\r\n            $.each(self.labels, self.markValid);\r\n\r\n            $.ajax(ajaxOptions).done(function (response) {\r\n                if (response.validationErrors) {\r\n                    $.each(self.inputs, function (name) {\r\n                        if (self.labels[name] && !response.validationErrors[name]) {\r\n                            self.labels[name].hide();\r\n                        }\r\n                    });\r\n\r\n                    if (response.validationErrors.base) {\r\n                        self.baseError.text(response.validationErrors.base.join(', ')).show();\r\n\r\n                        delete response.validationErrors.base;\r\n                    } else {\r\n                        self.baseError.hide();\r\n                    }\r\n\r\n                    $.each(response.validationErrors, self.markError);\r\n                } else if (response.redirect) {\r\n                    window.location.replace(response.redirect);\r\n                } else {\r\n                    if (self.options.clean) {\r\n                        self.form.get(0).reset();\r\n                    }\r\n                }\r\n            }).fail(function (response) {\r\n                var error = ajaxOptions.method + ' ' + ajaxOptions.url + ' ' + response.status + ' (' + response.statusText + ')';\r\n\r\n                self.baseError.text(error);\r\n                console.error(error);\r\n            });\r\n        });\r\n\r\n        self.markError = function (name, errors) {\r\n            if (!self.labels[name]) {\r\n                self.labels[name] = $('<label></label>')\r\n                    .attr('for', name)\r\n                    .addClass(self.options.classes.error);\r\n\r\n                self.inputs[name].after(self.labels[name]);\r\n            }\r\n\r\n            self.inputs[name]\r\n                .addClass(self.options.classes.error)\r\n                .removeClass(self.options.classes.valid);\r\n\r\n            self.labels[name].text(errors.join(', ')).show();\r\n        };\r\n\r\n        self.markValid = function (name) {\r\n            self.inputs[name]\r\n                .removeClass(self.options.classes.error)\r\n                .addClass(self.options.classes.valid);\r\n\r\n            if (self.labels[name]) {\r\n                self.labels[name].hide();\r\n            }\r\n        };\r\n\r\n        self.checkInput = function (name, rules) {\r\n            var isValid = true;\r\n\r\n            var errors = [];\r\n\r\n            $.each(rules, function (method, params) {\r\n                if (params) {\r\n                    if (methods[method]) {\r\n                        var valid = methods[method].func(self.inputs[name].val(), self.inputs[name], params);\r\n\r\n                        if (!valid) {\r\n                            var message = self.options.messages[name] ? self.options.messages[name][method] ? self.options.messages[name][method] : methods[method].message : methods[method].message;\r\n                            errors.push(message);\r\n                        }\r\n                    } else {\r\n                        console.error('Method \"' + method + '\" not found');\r\n                        errors.push('Method \"' + method + '\" not found');\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (errors.length) {\r\n                self.markError(name, errors);\r\n\r\n                isValid = false;\r\n            } else {\r\n                self.markValid(name);\r\n            }\r\n\r\n            return isValid;\r\n        };\r\n\r\n        self.checkForm = function () {\r\n            var isValid = true;\r\n\r\n            $.each(self.rules, function (name, rules) {\r\n                isValid = self.checkInput(name, rules) && isValid;\r\n            });\r\n\r\n            return isValid;\r\n        };\r\n\r\n        return self.form;\r\n    };\r\n\r\n    $.jdvalidate = {};\r\n\r\n    $.jdvalidate.addMethod = function (rule, func, message) {\r\n        methods[rule] = {\r\n            func: func,\r\n            message: message\r\n        };\r\n    };\r\n})(jQuery);","/**\r\n * Standart validation methods\r\n */\r\n\r\n(function ($) {\r\n    $.jdvalidate.addMethod(\"required\", function (value, element) {\r\n        return (value.trim() != '' && !element.is('[type=\"checkbox\"]')) || (element.is('[type=\"checkbox\"]') && element.is(':checked'));\r\n    }, \"The field is required\");\r\n\r\n    $.jdvalidate.addMethod(\"regexp\", function (value, element, regexp) {\r\n        return regexp.test(value);\r\n    }, \"The field value is invalid\");\r\n\r\n    $.jdvalidate.addMethod(\"email\", function (value) {\r\n        return /[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value);\r\n    }, \"The e-mail is invalid\");\r\n\r\n    $.jdvalidate.addMethod('filesize', function (value, element, size) {\r\n        return !element.get(0).files[0] || element.get(0).files[0].size <= size;\r\n    }, \"The file is too large\");\r\n\r\n    $.jdvalidate.addMethod('extension', function (value, element, extensions) {\r\n        return !element.get(0).files[0] || extensions.indexOf(element.get(0).files[0].name.split('.').pop()) > -1;\r\n    }, \"The file extension is invalid\");\r\n})(jQuery);"],"sourceRoot":"/source/"}