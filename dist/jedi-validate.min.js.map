{"version":3,"sources":["jedi-validate.js","jedi-validate.es6"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_classCallCheck","instance","Constructor","TypeError","isObject","item","_typeof","Array","isArray","mergeDeep","target","source","output","assign","keys","forEach","Symbol","iterator","constructor","_createClass","defineProperties","props","i","length","descriptor","protoProps","staticProps","prototype","JediValidate","root","options","arguments","undefined","this","defaultOptions","ajax","url","enctype","method","sendType","rules","messages","containers","parent","message","baseMessage","states","error","valid","pristine","dirty","callbacks","success","clean","redirect","fields","inputs","_cacheNodes","formOptions","getFormOptions","nodes","form","_ready","querySelector","querySelectorAll","_this","setAttribute","addEventListener","event","errors","checkForm","preventDefault","_send","input","name","field","parentNode","classList","contains","add","messageElement","document","createElement","appendChild","_defineRules","remove","checkInput","_this2","data","xhr","XMLHttpRequest","encodeURIComponent","Utils","getInputValue","slice","FormData","JSON","stringify","open","toUpperCase","setRequestHeader","console","dir","onreadystatechange","readyState","status","response","parse","responseText","e","validationErrors","base","innerHTML","join","_markError","window","location","href","reset","warn","statusText","send","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_rule","hasAttribute","err","regexp","RegExp","getAttribute","rule","inputErrors","isEmpty","methods","required","func","push","_getErrorMessage","params","_markValid","addMethod","trim","element","test","size","get","files","extensions","indexOf","split","pop","type","selectedIndex","selected","checked"],"mappings":"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","file":"jedi-validate.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JediValidate = function () {\n    function JediValidate(root) {\n        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        _classCallCheck(this, JediValidate);\n\n        var defaultOptions = {\n            ajax: {\n                url: null,\n                enctype: 'application/x-www-form-urlencoded',\n                method: 'GET'\n            },\n            sendType: 'serialize', // 'formData', 'json'\n            rules: {},\n            messages: {},\n            containers: {\n                parent: 'form-group',\n                message: 'help-block',\n                baseMessage: 'base-error'\n            },\n            states: {\n                error: 'error',\n                valid: 'valid',\n                pristine: 'pristine',\n                dirty: 'dirty'\n            },\n            callbacks: {\n                success: function success() {},\n                error: function error() {}\n            },\n            clean: true,\n            redirect: true\n        };\n\n        this.root = root;\n\n        this.options = mergeDeep(defaultOptions, options);\n\n        this.fields = {};\n        this.inputs = {};\n        this.messages = {};\n        this.rules = {};\n\n        this._cacheNodes();\n\n        var formOptions = JediValidate.getFormOptions(this.nodes.form);\n\n        this.options = mergeDeep(defaultOptions, formOptions, options);\n\n        this._ready();\n    }\n\n    _createClass(JediValidate, [{\n        key: '_cacheNodes',\n        value: function _cacheNodes() {\n            this.nodes = {\n                form: this.root.querySelector('form'),\n                inputs: this.root.querySelectorAll('[name]'),\n                baseMessage: this.root.querySelector('.' + this.options.containers.baseMessage)\n            };\n        }\n    }, {\n        key: '_ready',\n        value: function _ready() {\n            var _this = this;\n\n            this.nodes.form.setAttribute('novalidate', 'novalidate');\n\n            this.nodes.form.addEventListener('submit', function (event) {\n                var errors = _this.checkForm();\n\n                if (Object.keys(errors).length !== 0) {\n                    _this.options.callbacks.error(errors);\n\n                    event.preventDefault();\n                    return;\n                }\n\n                if (_this.options.ajax) {\n                    event.preventDefault();\n                } else {\n                    return;\n                }\n\n                _this._send();\n            });\n\n            this.nodes.inputs.forEach(function (input) {\n                var name = input.name;\n                _this.inputs[name] = input;\n\n                var field = input.parentNode;\n\n                do {\n                    if (field.classList.contains(_this.options.containers.parent)) {\n                        _this.fields[name] = field;\n                        break;\n                    }\n                } while (field = field.parentNode);\n\n                if (!_this.fields[name]) {\n                    throw 'Have no parent field';\n                }\n\n                _this.fields[name].classList.add(_this.options.states.pristine);\n\n                var messageElement = _this.fields[name].querySelector('.' + _this.options.containers.message);\n\n                if (messageElement) {\n                    _this.messages[name] = messageElement;\n                } else {\n                    _this.messages[name] = document.createElement(\"div\");\n                    _this.messages[name].classList.add(_this.options.containers.message);\n                    _this.fields[name].appendChild(_this.messages[name]);\n                }\n\n                _this._defineRules(name);\n\n                input.addEventListener('change', function () {\n                    _this.fields[name].classList.remove(_this.options.states.dirty);\n                    _this.checkInput(name);\n                });\n\n                input.addEventListener('input', function () {\n                    _this.fields[name].classList.remove(_this.options.states.pristine);\n                    _this.fields[name].classList.add(_this.options.states.dirty);\n                });\n            });\n        }\n    }, {\n        key: '_send',\n        value: function _send(options) {\n            var _this2 = this;\n\n            var data = '';\n            var xhr = new XMLHttpRequest();\n\n            if (this.options.sendType === 'serialize') {\n\n                this.nodes.inputs.forEach(function (input) {\n                    data += input.name + '=' + encodeURIComponent(Utils.getInputValue(input)) + '&';\n                });\n\n                data = data.slice(0, -1);\n            } else if (this.options.sendType === 'formData') {\n                data = new FormData(this.nodes.form);\n            } else if (this.options.sendType === 'json') {\n                data = {};\n\n                this.nodes.inputs.forEach(function (input) {\n                    data[input.name] = Utils.getInputValue(input);\n                });\n\n                data = JSON.stringify(data);\n            }\n\n            xhr.open(this.options.ajax.method, this.options.ajax.url + (this.options.ajax.method.toUpperCase() === 'GET' ? '?' + data : ''), true); // todo concat url and params\n\n            if (this.options.sendType === 'serialize') {\n                xhr.setRequestHeader('Content-type', this.options.ajax.enctype);\n            } else if (this.options.sendType === 'json') {\n                xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n            }\n\n            console.dir(this.options);\n\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4) {\n                    if (xhr.status == 200) {\n                        var response = {};\n\n                        try {\n                            response = JSON.parse(xhr.responseText);\n                        } catch (e) {\n                            response.validationErrors = { base: ['JSON parsing error'] }; // todo: language extension\n                        }\n\n                        if (response.validationErrors) {\n                            _this2.options.callbacks.error(response.validationErrors);\n\n                            if (response.validationErrors.base) {\n                                _this2.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n                                _this2.root.classList.add(_this2.options.states.error);\n                                _this2.root.classList.remove(_this2.options.states.valid);\n                                delete response.validationErrors.base;\n                            } else {\n                                _this2.nodes.baseMessage.innerHTML = '';\n                            }\n\n                            for (var name in response.validationErrors) {\n                                _this2._markError(name, response.validationErrors[name]);\n                            }\n                        } else {\n                            _this2.options.callbacks.success(response);\n\n                            if (_this2.options.redirect && response.redirect) {\n                                window.location.href = response.redirect;\n                                return;\n                            }\n\n                            if (_this2.options.clean) {\n                                _this2.nodes.form.reset();\n                            }\n                        }\n                    } else {\n                        console.warn(options.method + ' ' + options.url + ' ' + xhr.status + ' (' + xhr.statusText + ')');\n\n                        _this2.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n                        _this2.root.classList.add(_this2.options.states.error);\n                        _this2.root.classList.remove(_this2.options.states.valid);\n                    }\n                }\n            };\n\n            xhr.send(this.options.ajax.method.toUpperCase() === 'POST' ? data : '');\n        }\n    }, {\n        key: '_defineRules',\n        value: function _defineRules(name) {\n            var input = this.inputs[name];\n\n            this.rules[name] = {};\n\n            var rules = ['required', 'email', 'tel', 'url'];\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var _rule = _step.value;\n\n                    if (input.hasAttribute(_rule) || input.classList.contains(_rule)) {\n                        this.rules[name][_rule] = true;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            if (input.hasAttribute('pattern')) {\n                this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n            }\n\n            this.rules[name] = mergeDeep(this.rules[name], this.options.rules[name]);\n\n            for (var rule in this.rules[name]) {\n                if (this.rules[name][rule]) {\n                    this.fields[name].classList.add(rule);\n                }\n            }\n        }\n    }, {\n        key: 'checkForm',\n        value: function checkForm() {\n            var errors = {};\n\n            for (var name in this.rules) {\n                var inputErrors = this.checkInput(name);\n\n                if (inputErrors.length) {\n                    errors[name] = inputErrors;\n                }\n            }\n\n            return errors;\n        }\n    }, {\n        key: 'checkInput',\n        value: function checkInput(name) {\n            var rules = this.rules[name];\n            var errors = [];\n            var isEmpty = !JediValidate.methods.required.func(Utils.getInputValue(this.inputs[name]), this.inputs[name]);\n\n            if (isEmpty && rules.required) {\n                errors.push(this._getErrorMessage(name));\n            } else if (!isEmpty) {\n                for (var method in rules) {\n                    var params = rules[method];\n\n                    if (params) {\n                        if (JediValidate.methods[method]) {\n                            var valid = JediValidate.methods[method].func(Utils.getInputValue(this.inputs[name]), this.inputs[name], params);\n\n                            if (!valid) {\n                                errors.push(this._getErrorMessage(name));\n                            }\n                        } else {\n                            errors.push('Method \"' + method + '\" not found');\n                        }\n                    }\n                }\n            }\n\n            if (errors.length) {\n                this._markError(name, errors);\n            } else {\n                this._markValid(name);\n            }\n\n            return errors;\n        }\n    }, {\n        key: '_markError',\n        value: function _markError(name, errors) {\n            if (!this.fields[name] || !this.messages[name]) {\n                return;\n            }\n\n            this.fields[name].classList.add(this.options.states.error);\n            this.fields[name].classList.remove(this.options.states.valid);\n\n            this.messages[name].innerHTML = errors.join(', ');\n        }\n    }, {\n        key: '_markValid',\n        value: function _markValid(name) {\n            if (!this.fields[name] || !this.messages[name]) {\n                return;\n            }\n\n            this.fields[name].classList.add(this.options.states.valid);\n            this.fields[name].classList.remove(this.options.states.error);\n\n            this.messages[name].innerHTML = '';\n        }\n    }, {\n        key: '_getErrorMessage',\n        value: function _getErrorMessage(name) {\n            var message = '';\n\n            if (this.options.messages[name] && this.options.messages[name].required) {\n                message = this.options.messages[name].required;\n            } else {\n                message = JediValidate.methods.required.message;\n            }\n\n            return message;\n        }\n    }], [{\n        key: 'getFormOptions',\n        value: function getFormOptions(form) {\n            var options = { ajax: {} };\n\n            if (form.getAttribute('method')) {\n                options.ajax.method = form.getAttribute('method');\n            }\n\n            if (form.getAttribute('action')) {\n                options.ajax.url = form.getAttribute('action');\n            }\n\n            if (form.getAttribute('enctype')) {\n                options.ajax.enctype = form.getAttribute('enctype');\n            }\n\n            if (options.ajax.enctype === 'multipart/form-data') {\n                options.sendType = 'formData';\n            }\n\n            return options;\n        }\n    }]);\n\n    return JediValidate;\n}();\n\nJediValidate.methods = {};\n\nJediValidate.addMethod = function (rule, func, message) {\n    JediValidate.methods[rule] = {\n        func: func,\n        message: message\n    };\n};\n\n// todo languages\n\nJediValidate.addMethod('required', function (value) {\n    return value && value.trim() !== '';\n}, 'Это поле необходимо заполнить');\n\nJediValidate.addMethod('regexp', function (value, element, regexp) {\n    return regexp.test(value);\n}, 'Пожалуйста, введите корректное значение');\n\nJediValidate.addMethod('email', function (value) {\n    return (/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value)\n    );\n}, 'Пожалуйста, введите корректный адрес электронной почты');\n\nJediValidate.addMethod('filesize', function (value, element, size) {\n    return !element.get(0).files[0] || element.get(0).files[0].size <= size;\n}, 'Попробуйте загрузить файл поменьше');\n\nJediValidate.addMethod('extension', function (value, element, extensions) {\n    return !element.get(0).files[0] || extensions.indexOf(element.get(0).files[0].name.split('.').pop()) > -1;\n}, 'Пожалуйста, выберите файл с правильным расширением');\n\nJediValidate.addMethod('tel', function (value) {\n    return (/^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value)\n    );\n}, 'Не корректный номер телефона');\n\nJediValidate.addMethod('url', function (value) {\n    return (/[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value)\n    );\n}, 'Не корректный url');\n\nvar Utils = {\n    getInputValue: function getFormElementValue(element) {\n        var value = '';\n        var type = element.type;\n\n\n        if (type === 'select-one') {\n            if (element.options.length) {\n                value = element.options[element.selectedIndex].value;\n            }\n\n            return value;\n        }\n\n        if (type === 'select-multiple') {\n            value = [];\n\n            for (var i = 0; i < element.options.length; i++) {\n                if (element.options[i].selected) {\n                    value.push(element.options[i].value);\n                }\n            }\n\n            if (value.length === 0) {\n                value = '';\n            }\n\n            return value;\n        }\n\n        if (type === 'checkbox' || type === 'radio') {\n            if (element.checked) return element.value;else {\n                return '';\n            }\n        }\n\n        return element.value;\n    }\n};\n\nfunction isObject(item) {\n    return item && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && !Array.isArray(item) && item !== null;\n}\n\nfunction mergeDeep(target, source) {\n    var output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach(function (key) {\n            if (isObject(source[key])) {\n                if (!(key in target)) Object.assign(output, _defineProperty({}, key, source[key]));else output[key] = mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(output, _defineProperty({}, key, source[key]));\n            }\n        });\n    }\n    return output;\n}","class JediValidate {\n    constructor(root, options = {}) {\n        const defaultOptions = {\n            ajax: {\n                url: null,\n                enctype: 'application/x-www-form-urlencoded',\n                method: 'GET'\n            },\n            sendType: 'serialize', // 'formData', 'json'\n            rules: {},\n            messages: {},\n            containers: {\n                parent: 'form-group',\n                message: 'help-block',\n                baseMessage: 'base-error'\n            },\n            states: {\n                error: 'error',\n                valid: 'valid',\n                pristine: 'pristine',\n                dirty: 'dirty'\n            },\n            callbacks: {\n                success: function () {\n                },\n                error: function () {\n                }\n            },\n            clean: true,\n            redirect: true\n        };\n\n        this.root = root;\n\n        this.options = mergeDeep(defaultOptions, options);\n\n        this.fields = {};\n        this.inputs = {};\n        this.messages = {};\n        this.rules = {};\n\n        this._cacheNodes();\n\n        const formOptions = JediValidate.getFormOptions(this.nodes.form);\n\n        this.options = mergeDeep(defaultOptions, formOptions, options);\n\n        this._ready();\n    }\n\n    static getFormOptions(form) {\n        const options = {ajax: {}};\n\n        if (form.getAttribute('method')) {\n            options.ajax.method = form.getAttribute('method');\n        }\n\n        if (form.getAttribute('action')) {\n            options.ajax.url = form.getAttribute('action');\n        }\n\n        if (form.getAttribute('enctype')) {\n            options.ajax.enctype = form.getAttribute('enctype');\n        }\n\n        if (options.ajax.enctype === 'multipart/form-data') {\n            options.sendType = 'formData';\n        }\n\n        return options;\n    }\n\n    _cacheNodes() {\n        this.nodes = {\n            form: this.root.querySelector('form'),\n            inputs: this.root.querySelectorAll('[name]'),\n            baseMessage: this.root.querySelector(`.${this.options.containers.baseMessage}`),\n        }\n    }\n\n    _ready() {\n        this.nodes.form.setAttribute('novalidate', 'novalidate');\n\n        this.nodes.form.addEventListener('submit', (event) => {\n            var errors = this.checkForm();\n\n            if (Object.keys(errors).length !== 0) {\n                this.options.callbacks.error(errors);\n\n                event.preventDefault();\n                return;\n            }\n\n            if (this.options.ajax) {\n                event.preventDefault();\n            } else {\n                return;\n            }\n\n            this._send();\n        });\n\n        this.nodes.inputs.forEach((input) => {\n            const name = input.name;\n            this.inputs[name] = input;\n\n            let field = input.parentNode;\n\n            do {\n                if (field.classList.contains(this.options.containers.parent)) {\n                    this.fields[name] = field;\n                    break;\n                }\n            } while (field = field.parentNode);\n\n            if (!this.fields[name]) {\n                throw 'Have no parent field';\n            }\n\n            this.fields[name].classList.add(this.options.states.pristine);\n\n            var messageElement = this.fields[name].querySelector(`.${this.options.containers.message}`);\n\n            if (messageElement) {\n                this.messages[name] = messageElement;\n            } else {\n                this.messages[name] = document.createElement(\"div\");\n                this.messages[name].classList.add(this.options.containers.message);\n                this.fields[name].appendChild(this.messages[name]);\n            }\n\n            this._defineRules(name);\n\n            input.addEventListener('change', () => {\n                this.fields[name].classList.remove(this.options.states.dirty);\n                this.checkInput(name);\n            });\n\n            input.addEventListener('input', () => {\n                this.fields[name].classList.remove(this.options.states.pristine);\n                this.fields[name].classList.add(this.options.states.dirty);\n            });\n        });\n    }\n\n    _send(options) {\n        let data = '';\n        const xhr = new XMLHttpRequest();\n\n        if (this.options.sendType === 'serialize') {\n\n            this.nodes.inputs.forEach((input) => {\n                data += `${input.name}=${encodeURIComponent(Utils.getInputValue(input))}&`;\n            });\n\n            data = data.slice(0, -1);\n        } else if (this.options.sendType === 'formData') {\n            data = new FormData(this.nodes.form);\n        } else if (this.options.sendType === 'json') {\n            data = {};\n\n            this.nodes.inputs.forEach((input) => {\n                data[input.name] = Utils.getInputValue(input);\n            });\n\n            data = JSON.stringify(data);\n        }\n\n        xhr.open(this.options.ajax.method, this.options.ajax.url + (this.options.ajax.method.toUpperCase() === 'GET' ? ('?' + data) : ''), true); // todo concat url and params\n\n        if (this.options.sendType === 'serialize') {\n            xhr.setRequestHeader('Content-type', this.options.ajax.enctype);\n        } else if (this.options.sendType === 'json') {\n            xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n        }\n\n        console.dir(this.options);\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState == 4) {\n                if (xhr.status == 200) {\n                    let response = {};\n\n                    try {\n                        response = JSON.parse(xhr.responseText);\n                    } catch (e) {\n                        response.validationErrors = {base: ['JSON parsing error']};  // todo: language extension\n                    }\n\n                    if (response.validationErrors) {\n                        this.options.callbacks.error(response.validationErrors);\n\n                        if (response.validationErrors.base) {\n                            this.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n                            this.root.classList.add(this.options.states.error);\n                            this.root.classList.remove(this.options.states.valid);\n                            delete response.validationErrors.base;\n                        } else {\n                            this.nodes.baseMessage.innerHTML = '';\n                        }\n\n                        for (let name in response.validationErrors) {\n                            this._markError(name, response.validationErrors[name]);\n                        }\n                    } else {\n                        this.options.callbacks.success(response);\n\n                        if (this.options.redirect && response.redirect) {\n                            window.location.href = response.redirect;\n                            return;\n                        }\n\n                        if (this.options.clean) {\n                            this.nodes.form.reset();\n                        }\n                    }\n                } else {\n                    console.warn(options.method + ' ' + options.url + ' ' + xhr.status + ' (' + xhr.statusText + ')');\n\n                    this.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n                    this.root.classList.add(this.options.states.error);\n                    this.root.classList.remove(this.options.states.valid);\n                }\n            }\n        };\n\n        xhr.send(this.options.ajax.method.toUpperCase() === 'POST' ? data : '');\n    }\n\n    _defineRules(name) {\n        const input = this.inputs[name];\n\n        this.rules[name] = {};\n\n        const rules = ['required', 'email', 'tel', 'url'];\n\n        for (let rule of rules) {\n            if (input.hasAttribute(rule) || input.classList.contains(rule)) {\n                this.rules[name][rule] = true;\n            }\n        }\n\n        if (input.hasAttribute('pattern')) {\n            this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n        }\n\n        this.rules[name] = mergeDeep(this.rules[name], this.options.rules[name]);\n\n        for (let rule in this.rules[name]) {\n            if (this.rules[name][rule]) {\n                this.fields[name].classList.add(rule);\n            }\n        }\n    }\n\n    checkForm() {\n        var errors = {};\n\n        for (let name in this.rules) {\n            var inputErrors = this.checkInput(name);\n\n            if (inputErrors.length) {\n                errors[name] = inputErrors;\n            }\n        }\n\n        return errors;\n    }\n\n    checkInput(name) {\n        const rules = this.rules[name];\n        const errors = [];\n        const isEmpty = !JediValidate.methods.required.func(Utils.getInputValue(this.inputs[name]), this.inputs[name]);\n\n        if (isEmpty && rules.required) {\n            errors.push(this._getErrorMessage(name));\n        } else if (!isEmpty) {\n            for (let method in rules) {\n                const params = rules[method];\n\n                if (params) {\n                    if (JediValidate.methods[method]) {\n                        var valid = JediValidate.methods[method].func(Utils.getInputValue(this.inputs[name]), this.inputs[name], params);\n\n                        if (!valid) {\n                            errors.push(this._getErrorMessage(name));\n                        }\n                    } else {\n                        errors.push('Method \"' + method + '\" not found');\n                    }\n                }\n            }\n        }\n\n        if (errors.length) {\n            this._markError(name, errors);\n        } else {\n            this._markValid(name);\n        }\n\n        return errors;\n    }\n\n    _markError(name, errors) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.error);\n        this.fields[name].classList.remove(this.options.states.valid);\n\n        this.messages[name].innerHTML = errors.join(', ');\n    }\n\n    _markValid(name) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.valid);\n        this.fields[name].classList.remove(this.options.states.error);\n\n        this.messages[name].innerHTML = '';\n    }\n\n    _getErrorMessage(name) {\n        let message = '';\n\n        if (this.options.messages[name] && this.options.messages[name].required) {\n            message = this.options.messages[name].required;\n        } else {\n            message = JediValidate.methods.required.message;\n        }\n\n        return message;\n    };\n}\n\nJediValidate.methods = {};\n\nJediValidate.addMethod = function (rule, func, message) {\n    JediValidate.methods[rule] = {\n        func: func,\n        message: message\n    };\n};\n\n// todo languages\n\nJediValidate.addMethod('required', function (value) {\n    return (value && value.trim() !== '');\n}, 'Это поле необходимо заполнить');\n\nJediValidate.addMethod('regexp', function (value, element, regexp) {\n    return regexp.test(value);\n}, 'Пожалуйста, введите корректное значение');\n\nJediValidate.addMethod('email', function (value) {\n    return /[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value);\n}, 'Пожалуйста, введите корректный адрес электронной почты');\n\nJediValidate.addMethod('filesize', function (value, element, size) {\n    return !element.get(0).files[0] || element.get(0).files[0].size <= size;\n}, 'Попробуйте загрузить файл поменьше');\n\nJediValidate.addMethod('extension', function (value, element, extensions) {\n    return !element.get(0).files[0] || extensions.indexOf(element.get(0).files[0].name.split('.').pop()) > -1;\n}, 'Пожалуйста, выберите файл с правильным расширением');\n\nJediValidate.addMethod('tel', function (value) {\n    return /^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value);\n}, 'Не корректный номер телефона');\n\nJediValidate.addMethod('url', function (value) {\n    return /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value);\n}, 'Не корректный url');\n\nvar Utils = {\n    getInputValue: function getFormElementValue(element) {\n        let value = '';\n        let {type} = element;\n\n        if (type === 'select-one') {\n            if (element.options.length) {\n                value = element.options[element.selectedIndex].value;\n            }\n\n            return value;\n        }\n\n        if (type === 'select-multiple') {\n            value = [];\n\n            for (let i = 0; i < element.options.length; i++) {\n                if (element.options[i].selected) {\n                    value.push(element.options[i].value);\n                }\n            }\n\n            if (value.length === 0) {\n                value = ''\n            }\n\n            return value;\n        }\n\n        if (type === 'checkbox' || type === 'radio') {\n            if (element.checked)\n                return element.value;\n            else {\n                return '';\n            }\n        }\n\n        return element.value;\n    }\n};\n\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item) && item !== null);\n}\n\nfunction mergeDeep(target, source) {\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach(key => {\n            if (isObject(source[key])) {\n                if (!(key in target))\n                    Object.assign(output, {[key]: source[key]});\n                else\n                    output[key] = mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(output, {[key]: source[key]});\n            }\n        });\n    }\n    return output;\n}"],"sourceRoot":"/source/"}