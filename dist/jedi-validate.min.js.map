{"version":3,"sources":["jedi-validate.js","jedi-validate.es6"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","JediValidate","root","options","arguments","undefined","this","defaultOptions","ajax","dataType","sendType","rules","messages","containers","parent","message","baseMessage","states","error","valid","callbacks","success","assign","fields","inputs","_cacheNodes","_ready","value","nodes","form","querySelector","querySelectorAll","_this","setAttribute","addEventListener","event","errors","checkForm","keys","preventDefault","ajaxOptions","url","getAttribute","method","_send","forEach","input","name","field","parentNode","classList","contains","messageElement","document","createElement","add","appendChild","_defineRules","checkInput","_this2","data","encodeURIComponent","slice","xhttp","XMLHttpRequest","open","toUpperCase","onreadystatechange","readyState","status","response","JSON","parse","responseText","e","validationErrors","base","innerHTML","join","remove","_markError","redirect","window","location","href","clean","reset","console","warn","statusText","send","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_rule","hasAttribute","err","regexp","RegExp","rule","inputErrors","isEmpty","methods","required","func","push","_getErrorMessage","params","_markValid","addMethod","element","trim","test","size","get","files","extensions","indexOf","split","pop"],"mappings":"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","file":"jedi-validate.min.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JediValidate = function () {\n    function JediValidate(root) {\n        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        _classCallCheck(this, JediValidate);\n\n        var defaultOptions = {\n            ajax: {\n                dataType: 'json'\n            },\n            sendType: 'serialize',\n            rules: {},\n            messages: {},\n            containers: {\n                parent: 'form-group',\n                message: 'help-block',\n                baseMessage: 'base-error'\n            },\n            states: {\n                error: 'error',\n                valid: 'valid'\n            },\n            callbacks: {\n                success: function success() {},\n                error: function error() {}\n            }\n        };\n\n        this.root = root;\n\n        this.options = Object.assign(defaultOptions, options);\n\n        this.fields = {};\n        this.inputs = {};\n        this.messages = {};\n        this.rules = {};\n\n        this._cacheNodes();\n        this._ready();\n    }\n\n    _createClass(JediValidate, [{\n        key: '_cacheNodes',\n        value: function _cacheNodes() {\n            this.nodes = {\n                form: this.root.querySelector('form'),\n                inputs: this.root.querySelectorAll('[name]'),\n                baseMessage: this.root.querySelector('.' + this.options.containers.baseMessage)\n            };\n        }\n    }, {\n        key: '_ready',\n        value: function _ready() {\n            var _this = this;\n\n            this.nodes.form.setAttribute('novalidate', 'novalidate');\n\n            this.nodes.form.addEventListener('submit', function (event) {\n                var errors = _this.checkForm();\n\n                if (Object.keys(errors).length !== 0) {\n                    _this.options.callbacks.error(errors);\n\n                    event.preventDefault();\n                    return;\n                }\n\n                if (_this.options.ajax) {\n                    event.preventDefault();\n                } else {\n                    return;\n                }\n\n                var ajaxOptions = {};\n\n                ajaxOptions.url = _this.nodes.form.getAttribute('action');\n                ajaxOptions.method = _this.nodes.form.getAttribute('method');\n\n                _this._send(ajaxOptions);\n            });\n\n            this.nodes.inputs.forEach(function (input) {\n                var name = input.name;\n                _this.inputs[name] = input;\n\n                var field = input.parentNode;\n\n                do {\n                    if (field.classList.contains(_this.options.containers.parent)) {\n                        _this.fields[name] = field;\n                        break;\n                    }\n                } while (field = field.parentNode);\n\n                if (!_this.fields[name]) {\n                    throw 'Have no parent field';\n                }\n\n                var messageElement = _this.fields[name].querySelector('.' + _this.options.containers.message);\n\n                if (messageElement) {\n                    _this.messages[name] = messageElement;\n                } else {\n                    _this.messages[name] = document.createElement(\"div\");\n                    _this.messages[name].classList.add(_this.options.containers.message);\n                    _this.fields[name].appendChild(_this.messages[name]);\n                }\n\n                _this._defineRules(name);\n\n                input.addEventListener('change', function () {\n                    _this.checkInput(name);\n                });\n            });\n        }\n    }, {\n        key: '_send',\n        value: function _send(options) {\n            var _this2 = this;\n\n            var data = '';\n\n            this.nodes.inputs.forEach(function (input) {\n                data += input.name + '=' + encodeURIComponent(input.value) + '&';\n            });\n\n            data = data.slice(0, -1);\n\n            var xhttp = new XMLHttpRequest();\n\n            xhttp.open(\"GET\", options.url + (options.method.toUpperCase() === 'GET' ? '?' + data : ''), true); // todo concat url and params\n\n            xhttp.onreadystatechange = function () {\n                if (xhttp.readyState == 4) {\n                    if (xhttp.status == 200) {\n                        var response = {};\n\n                        try {\n                            response = JSON.parse(xhttp.responseText);\n                        } catch (e) {\n                            response.validationErrors = { base: ['JSON parsing error'] }; // todo: language extension\n                        }\n\n                        if (response.validationErrors) {\n                            _this2.options.callbacks.error(response.validationErrors);\n\n                            if (response.validationErrors.base) {\n                                _this2.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n                                _this2.root.classList.add(_this2.options.states.error);\n                                _this2.root.classList.remove(_this2.options.states.valid);\n                                delete response.validationErrors.base;\n                            } else {\n                                _this2.nodes.baseMessage.innerHTML = '';\n                            }\n\n                            for (var name in response.validationErrors) {\n                                _this2._markError(name, response.validationErrors[name]);\n                            }\n                        } else {\n                            _this2.options.callbacks.success(response);\n\n                            if (_this2.options.redirect && response.redirect) {\n                                window.location.href = response.redirect;\n                                return;\n                            }\n\n                            if (_this2.options.clean) {\n                                _this2.nodes.form.reset();\n                            }\n                        }\n                    } else {\n                        console.warn(options.method + ' ' + options.url + ' ' + xhttp.status + ' (' + xhttp.statusText + ')');\n\n                        _this2.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n                        _this2.root.classList.add(_this2.options.states.error);\n                        _this2.root.classList.remove(_this2.options.states.valid);\n                    }\n                }\n            };\n\n            xhttp.send(options.method.toUpperCase() === 'POST' ? data : '');\n        }\n    }, {\n        key: '_defineRules',\n        value: function _defineRules(name) {\n            var input = this.inputs[name];\n\n            this.rules[name] = {};\n\n            var rules = ['required', 'email', 'tel', 'url'];\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var _rule = _step.value;\n\n                    if (input.hasAttribute(_rule) || input.classList.contains(_rule)) {\n                        this.rules[name][_rule] = true;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            if (input.hasAttribute('pattern')) {\n                this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n            }\n\n            this.rules[name] = Object.assign(this.rules[name], this.options.rules[name]);\n\n            for (var rule in this.rules[name]) {\n                if (this.rules[name][rule]) {\n                    this.fields[name].classList.add(rule);\n                }\n            }\n        }\n    }, {\n        key: 'checkForm',\n        value: function checkForm() {\n            var errors = {};\n\n            for (var name in this.rules) {\n                var inputErrors = this.checkInput(name);\n\n                if (inputErrors.length) {\n                    errors[name] = inputErrors;\n                }\n            }\n\n            return errors;\n        }\n    }, {\n        key: 'checkInput',\n        value: function checkInput(name) {\n            var rules = this.rules[name];\n            var errors = [];\n            var isEmpty = !JediValidate.methods.required.func(this.inputs[name].value, this.inputs[name]);\n\n            if (isEmpty && rules.required) {\n                errors.push(this._getErrorMessage(name));\n            } else if (!isEmpty) {\n                for (var method in rules) {\n                    var params = rules[method];\n\n                    if (params) {\n                        if (JediValidate.methods[method]) {\n                            var valid = JediValidate.methods[method].func(this.inputs[name].value, this.inputs[name], params);\n\n                            if (!valid) {\n                                errors.push(this._getErrorMessage(name));\n                            }\n                        } else {\n                            errors.push('Method \"' + method + '\" not found');\n                        }\n                    }\n                }\n            }\n\n            if (errors.length) {\n                this._markError(name, errors);\n            } else {\n                this._markValid(name);\n            }\n\n            return errors;\n        }\n    }, {\n        key: '_markError',\n        value: function _markError(name, errors) {\n            if (!this.fields[name] || !this.messages[name]) {\n                return;\n            }\n\n            this.fields[name].classList.add(this.options.states.error);\n            this.fields[name].classList.remove(this.options.states.valid);\n\n            this.messages[name].innerHTML = errors.join(', ');\n        }\n    }, {\n        key: '_markValid',\n        value: function _markValid(name) {\n            if (!this.fields[name] || !this.messages[name]) {\n                return;\n            }\n\n            this.fields[name].classList.add(this.options.states.valid);\n            this.fields[name].classList.remove(this.options.states.error);\n\n            this.messages[name].innerHTML = '';\n        }\n    }, {\n        key: '_getErrorMessage',\n        value: function _getErrorMessage(name) {\n            var message = '';\n\n            if (this.options.messages[name] && this.options.messages[name].required) {\n                message = this.options.messages[name].required;\n            } else {\n                message = JediValidate.methods.required.message;\n            }\n\n            return message;\n        }\n    }]);\n\n    return JediValidate;\n}();\n\nJediValidate.methods = {};\n\nJediValidate.addMethod = function (rule, func, message) {\n    JediValidate.methods[rule] = {\n        func: func,\n        message: message\n    };\n};\n\n// todo languages\n\nJediValidate.addMethod('required', function (value, element) {\n    return value && value.trim() !== '' && element.getAttribute('type') !== \"checkbox\" || element.getAttribute('type') === \"checkbox\" && element.hasAttribute('checked');\n}, 'Это поле необходимо заполнить');\n\nJediValidate.addMethod('regexp', function (value, element, regexp) {\n    return regexp.test(value);\n}, 'Пожалуйста, введите корректное значение');\n\nJediValidate.addMethod('email', function (value) {\n    return (/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value)\n    );\n}, 'Пожалуйста, введите корректный адрес электронной почты');\n\nJediValidate.addMethod('filesize', function (value, element, size) {\n    return !element.get(0).files[0] || element.get(0).files[0].size <= size;\n}, 'Попробуйте загрузить файл поменьше');\n\nJediValidate.addMethod('extension', function (value, element, extensions) {\n    return !element.get(0).files[0] || extensions.indexOf(element.get(0).files[0].name.split('.').pop()) > -1;\n}, 'Пожалуйста, выберите файл с правильным расширением');\n\nJediValidate.addMethod('tel', function (value) {\n    return (/^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value)\n    );\n}, 'Не корректный номер телефона');\n\nJediValidate.addMethod('url', function (value) {\n    return (/[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value)\n    );\n}, 'Не корректный url');","class JediValidate {\n    constructor(root, options = {}) {\n        const defaultOptions = {\n            ajax: {\n                dataType: 'json'\n            },\n            sendType: 'serialize',\n            rules: {},\n            messages: {},\n            containers: {\n                parent: 'form-group',\n                message: 'help-block',\n                baseMessage: 'base-error'\n            },\n            states: {\n                error: 'error',\n                valid: 'valid'\n            },\n            callbacks: {\n                success: function () {},\n                error: function () {}\n            }\n        };\n\n        this.root = root;\n\n        this.options = Object.assign(defaultOptions, options);\n\n        this.fields = {};\n        this.inputs = {};\n        this.messages = {};\n        this.rules = {};\n\n        this._cacheNodes();\n        this._ready();\n    }\n\n    _cacheNodes() {\n        this.nodes = {\n            form: this.root.querySelector('form'),\n            inputs: this.root.querySelectorAll('[name]'),\n            baseMessage: this.root.querySelector(`.${this.options.containers.baseMessage}`),\n        }\n    }\n\n    _ready() {\n        this.nodes.form.setAttribute('novalidate', 'novalidate');\n\n        this.nodes.form.addEventListener('submit', (event) => {\n            var errors = this.checkForm();\n\n            if (Object.keys(errors).length !== 0) {\n                this.options.callbacks.error(errors);\n\n                event.preventDefault();\n                return;\n            }\n\n            if (this.options.ajax) {\n                event.preventDefault();\n            } else {\n                return;\n            }\n\n            var ajaxOptions = {};\n\n            ajaxOptions.url = this.nodes.form.getAttribute('action');\n            ajaxOptions.method = this.nodes.form.getAttribute('method');\n\n            this._send(ajaxOptions);\n        });\n\n        this.nodes.inputs.forEach((input) => {\n            const name = input.name;\n            this.inputs[name] = input;\n\n            let field = input.parentNode;\n\n            do {\n                if (field.classList.contains(this.options.containers.parent)) {\n                    this.fields[name] = field;\n                    break;\n                }\n            } while (field = field.parentNode);\n\n            if (!this.fields[name]) {\n                throw 'Have no parent field';\n            }\n\n            var messageElement = this.fields[name].querySelector(`.${this.options.containers.message}`);\n\n            if (messageElement) {\n                this.messages[name] = messageElement;\n            } else {\n                this.messages[name] = document.createElement(\"div\");\n                this.messages[name].classList.add(this.options.containers.message);\n                this.fields[name].appendChild(this.messages[name]);\n            }\n\n            this._defineRules(name);\n\n            input.addEventListener('change', () => {\n                this.checkInput(name);\n            });\n        });\n    }\n\n    _send(options) {\n        let data = '';\n\n        this.nodes.inputs.forEach((input) => {\n            data += `${input.name}=${encodeURIComponent(input.value)}&`;\n        });\n\n        data = data.slice(0, -1);\n\n        const xhttp = new XMLHttpRequest();\n\n        xhttp.open(\"GET\", options.url + (options.method.toUpperCase() === 'GET' ? ('?' + data) : ''), true); // todo concat url and params\n\n        xhttp.onreadystatechange = () => {\n            if (xhttp.readyState == 4) {\n                if (xhttp.status == 200) {\n                    let response = {};\n\n                    try {\n                        response = JSON.parse(xhttp.responseText);\n                    } catch (e) {\n                        response.validationErrors = {base: ['JSON parsing error']};  // todo: language extension\n                    }\n\n                    if (response.validationErrors) {\n                        this.options.callbacks.error(response.validationErrors);\n\n                        if (response.validationErrors.base) {\n                            this.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n                            this.root.classList.add(this.options.states.error);\n                            this.root.classList.remove(this.options.states.valid);\n                            delete response.validationErrors.base;\n                        } else {\n                            this.nodes.baseMessage.innerHTML = '';\n                        }\n\n                        for (let name in response.validationErrors) {\n                            this._markError(name, response.validationErrors[name]);\n                        }\n                    } else {\n                        this.options.callbacks.success(response);\n\n                        if (this.options.redirect && response.redirect) {\n                            window.location.href = response.redirect;\n                            return;\n                        }\n\n                        if (this.options.clean) {\n                            this.nodes.form.reset();\n                        }\n                    }\n                } else {\n                    console.warn(options.method + ' ' + options.url + ' ' + xhttp.status + ' (' + xhttp.statusText + ')');\n\n                    this.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n                    this.root.classList.add(this.options.states.error);\n                    this.root.classList.remove(this.options.states.valid);\n                }\n            }\n        };\n\n        xhttp.send(options.method.toUpperCase() === 'POST' ? data : '');\n    }\n\n    _defineRules(name) {\n        const input = this.inputs[name];\n\n        this.rules[name] = {};\n\n        const rules = ['required', 'email', 'tel', 'url'];\n\n        for (let rule of rules) {\n            if (input.hasAttribute(rule) || input.classList.contains(rule)) {\n                this.rules[name][rule] = true;\n            }\n        }\n\n        if (input.hasAttribute('pattern')) {\n            this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n        }\n\n        this.rules[name] = Object.assign(this.rules[name], this.options.rules[name]);\n\n        for (let rule in this.rules[name]) {\n            if (this.rules[name][rule]) {\n                this.fields[name].classList.add(rule);\n            }\n        }\n    }\n\n    checkForm() {\n        var errors = {};\n\n        for (let name in this.rules) {\n            var inputErrors = this.checkInput(name);\n\n            if (inputErrors.length) {\n                errors[name] = inputErrors;\n            }\n        }\n\n        return errors;\n    }\n\n    checkInput(name) {\n        const rules = this.rules[name];\n        const errors = [];\n        const isEmpty = !JediValidate.methods.required.func(this.inputs[name].value, this.inputs[name]);\n\n        if (isEmpty && rules.required) {\n            errors.push(this._getErrorMessage(name));\n        } else if (!isEmpty) {\n            for (let method in rules) {\n                const params = rules[method];\n\n                if (params) {\n                    if (JediValidate.methods[method]) {\n                        var valid = JediValidate.methods[method].func(this.inputs[name].value, this.inputs[name], params);\n\n                        if (!valid) {\n                            errors.push(this._getErrorMessage(name));\n                        }\n                    } else {\n                        errors.push('Method \"' + method + '\" not found');\n                    }\n                }\n            }\n        }\n\n        if (errors.length) {\n            this._markError(name, errors);\n        } else {\n            this._markValid(name);\n        }\n\n        return errors;\n    }\n\n    _markError(name, errors) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.error);\n        this.fields[name].classList.remove(this.options.states.valid);\n\n        this.messages[name].innerHTML = errors.join(', ');\n    }\n\n    _markValid(name) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.valid);\n        this.fields[name].classList.remove(this.options.states.error);\n\n        this.messages[name].innerHTML = '';\n    }\n\n    _getErrorMessage(name) {\n        let message = '';\n\n        if (this.options.messages[name] && this.options.messages[name].required) {\n            message = this.options.messages[name].required;\n        } else {\n            message = JediValidate.methods.required.message;\n        }\n\n        return message;\n    };\n}\n\nJediValidate.methods = {};\n\nJediValidate.addMethod = function (rule, func, message) {\n    JediValidate.methods[rule] = {\n        func: func,\n        message: message\n    };\n};\n\n// todo languages\n\nJediValidate.addMethod('required', function (value, element) {\n    return (value && value.trim() !== '') && (element.getAttribute('type') !== \"checkbox\") || (element.getAttribute('type') === \"checkbox\" && element.hasAttribute('checked'));\n}, 'Это поле необходимо заполнить');\n\nJediValidate.addMethod('regexp', function (value, element, regexp) {\n    return regexp.test(value);\n}, 'Пожалуйста, введите корректное значение');\n\nJediValidate.addMethod('email', function (value) {\n    return /[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value);\n}, 'Пожалуйста, введите корректный адрес электронной почты');\n\nJediValidate.addMethod('filesize', function (value, element, size) {\n    return !element.get(0).files[0] || element.get(0).files[0].size <= size;\n}, 'Попробуйте загрузить файл поменьше');\n\nJediValidate.addMethod('extension', function (value, element, extensions) {\n    return !element.get(0).files[0] || extensions.indexOf(element.get(0).files[0].name.split('.').pop()) > -1;\n}, 'Пожалуйста, выберите файл с правильным расширением');\n\nJediValidate.addMethod('tel', function (value) {\n    return /^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value);\n}, 'Не корректный номер телефона');\n\nJediValidate.addMethod('url', function (value) {\n    return /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value);\n}, 'Не корректный url');"],"sourceRoot":"/source/"}