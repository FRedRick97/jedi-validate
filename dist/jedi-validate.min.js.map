{"version":3,"sources":["jedi-validate.js","jedi-validate.es6"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_classCallCheck","instance","Constructor","TypeError","isObject","item","_typeof","Array","isArray","mergeDeep","target","source","output","assign","keys","forEach","Symbol","iterator","constructor","_createClass","defineProperties","props","i","length","descriptor","protoProps","staticProps","prototype","JediValidate","root","options","arguments","undefined","this","defaultOptions","ajax","url","enctype","method","sendType","rules","messages","containers","parent","message","baseMessage","states","error","valid","pristine","dirty","callbacks","success","clean","redirect","fields","inputs","_cacheNodes","formOptions","getFormOptions","nodes","form","_ready","querySelector","querySelectorAll","_this","setAttribute","addEventListener","event","errors","checkForm","preventDefault","_send","input","name","push","field","parentNode","classList","contains","add","messageElement","document","createElement","appendChild","_defineRules","remove","checkInput","_this2","data","xhr","XMLHttpRequest","encodeURIComponent","getInputValue","slice","FormData","_name","parseInputName","JSON","stringify","open","toUpperCase","setRequestHeader","onreadystatechange","readyState","status","response","parse","responseText","e","validationErrors","base","innerHTML","join","_name2","_markError","window","location","href","reset","console","warn","statusText","send","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","_rule","hasAttribute","err","regexp","RegExp","getAttribute","rule","inputErrors","isEmpty","methods","required","func","_getErrorMessage","params","_markValid","elements","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","element","matches","re","path","exec","index","lastIndex","createObject","segment","object","getRadioGroupValue","type","selectedIndex","selected","checked","addMethod","trim","test","size","get","files","extensions","indexOf","split","pop"],"mappings":"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","file":"jedi-validate.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar JediValidate = function () {\n    function JediValidate(root) {\n        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n        _classCallCheck(this, JediValidate);\n\n        var defaultOptions = {\n            ajax: {\n                url: null,\n                enctype: 'application/x-www-form-urlencoded',\n                method: 'GET'\n            },\n            sendType: 'serialize', // 'formData', 'json'\n            rules: {},\n            messages: {},\n            containers: {\n                parent: 'form-group',\n                message: 'help-block',\n                baseMessage: 'base-error'\n            },\n            states: {\n                error: 'error',\n                valid: 'valid',\n                pristine: 'pristine',\n                dirty: 'dirty'\n            },\n            callbacks: {\n                success: function success() {},\n                error: function error() {}\n            },\n            clean: true,\n            redirect: true\n        };\n\n        this.root = root;\n\n        this.options = mergeDeep(defaultOptions, options);\n\n        this.fields = {};\n        this.inputs = {};\n        this.messages = {};\n        this.rules = {};\n\n        this._cacheNodes();\n\n        var formOptions = JediValidate.getFormOptions(this.nodes.form);\n\n        this.options = mergeDeep(this.options, defaultOptions);\n        this.options = mergeDeep(this.options, formOptions);\n        this.options = mergeDeep(this.options, options);\n\n        this._ready();\n    }\n\n    _createClass(JediValidate, [{\n        key: '_cacheNodes',\n        value: function _cacheNodes() {\n            this.nodes = {\n                form: this.root.querySelector('form'),\n                inputs: this.root.querySelectorAll('[name]'),\n                baseMessage: this.root.querySelector('.' + this.options.containers.baseMessage)\n            };\n        }\n    }, {\n        key: '_ready',\n        value: function _ready() {\n            var _this = this;\n\n            this.nodes.form.setAttribute('novalidate', 'novalidate');\n\n            this.nodes.form.addEventListener('submit', function (event) {\n                var errors = _this.checkForm();\n\n                if (Object.keys(errors).length !== 0) {\n                    _this.options.callbacks.error(errors);\n\n                    event.preventDefault();\n                    return;\n                }\n\n                if (_this.options.ajax) {\n                    event.preventDefault();\n                } else {\n                    return;\n                }\n\n                _this._send();\n            });\n\n            this.nodes.inputs.forEach(function (input) {\n                var name = input.name;\n\n                if (_this.inputs[name]) {\n                    if (Array.isArray(_this.inputs[name])) {\n                        _this.inputs[name].push(input);\n                    } else {\n                        _this.inputs[name] = [_this.inputs[name], input];\n                    }\n                } else {\n                    _this.inputs[name] = input;\n\n                    var field = input.parentNode;\n\n                    do {\n                        if (field.classList.contains(_this.options.containers.parent)) {\n                            _this.fields[name] = field;\n                            break;\n                        }\n                    } while (field = field.parentNode);\n\n                    if (!_this.fields[name]) {\n                        throw 'Have no parent field';\n                    }\n\n                    _this.fields[name].classList.add(_this.options.states.pristine);\n\n                    var messageElement = _this.fields[name].querySelector('.' + _this.options.containers.message);\n\n                    if (messageElement) {\n                        _this.messages[name] = messageElement;\n                    } else {\n                        _this.messages[name] = document.createElement(\"div\");\n                        _this.messages[name].classList.add(_this.options.containers.message);\n                        _this.fields[name].appendChild(_this.messages[name]);\n                    }\n\n                    _this._defineRules(name);\n                }\n\n                input.addEventListener('change', function () {\n                    _this.fields[name].classList.remove(_this.options.states.dirty);\n                    _this.checkInput(name);\n                });\n\n                input.addEventListener('input', function () {\n                    _this.fields[name].classList.remove(_this.options.states.pristine);\n                    _this.fields[name].classList.add(_this.options.states.dirty);\n                });\n            });\n        }\n    }, {\n        key: '_send',\n        value: function _send(options) {\n            var _this2 = this;\n\n            var data = '';\n            var xhr = new XMLHttpRequest();\n\n            if (this.options.sendType === 'serialize') {\n                for (var name in this.inputs) {\n                    data += name + '=' + encodeURIComponent(JediValidate.getInputValue(this.inputs[name])) + '&';\n                }\n\n                data = data.slice(0, -1);\n            } else if (this.options.sendType === 'formData') {\n                data = new FormData(this.nodes.form);\n            } else if (this.options.sendType === 'json') {\n                data = {};\n\n                for (var _name in this.inputs) {\n                    data = mergeDeep(data, JediValidate.parseInputName(_name, JediValidate.getInputValue(this.inputs[_name])));\n                }\n\n                data = JSON.stringify(data);\n            }\n\n            xhr.open(this.options.ajax.method, this.options.ajax.url + (this.options.ajax.method.toUpperCase() === 'GET' ? '?' + data : ''), true); // todo concat url and params\n\n            if (this.options.sendType === 'serialize') {\n                xhr.setRequestHeader('Content-type', this.options.ajax.enctype);\n            } else if (this.options.sendType === 'json') {\n                xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n            }\n\n            xhr.onreadystatechange = function () {\n                if (xhr.readyState == 4) {\n                    if (xhr.status == 200) {\n                        var response = {};\n\n                        try {\n                            response = JSON.parse(xhr.responseText);\n                        } catch (e) {\n                            response.validationErrors = { base: ['JSON parsing error'] }; // todo: language extension\n                        }\n\n                        if (response.validationErrors) {\n                            _this2.options.callbacks.error(response.validationErrors);\n\n                            if (response.validationErrors.base) {\n                                _this2.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n                                _this2.root.classList.add(_this2.options.states.error);\n                                _this2.root.classList.remove(_this2.options.states.valid);\n                                delete response.validationErrors.base;\n                            } else {\n                                _this2.nodes.baseMessage.innerHTML = '';\n                            }\n\n                            for (var _name2 in response.validationErrors) {\n                                _this2._markError(_name2, response.validationErrors[_name2]);\n                            }\n                        } else {\n                            _this2.options.callbacks.success(response);\n\n                            if (_this2.options.redirect && response.redirect) {\n                                window.location.href = response.redirect;\n                                return;\n                            }\n\n                            if (_this2.options.clean) {\n                                _this2.nodes.form.reset();\n                            }\n                        }\n                    } else {\n                        console.warn(options.method + ' ' + options.url + ' ' + xhr.status + ' (' + xhr.statusText + ')');\n\n                        _this2.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n                        _this2.root.classList.add(_this2.options.states.error);\n                        _this2.root.classList.remove(_this2.options.states.valid);\n                    }\n                }\n            };\n\n            xhr.send(this.options.ajax.method.toUpperCase() === 'POST' ? data : '');\n        }\n    }, {\n        key: '_defineRules',\n        value: function _defineRules(name) {\n            var input = this.inputs[name];\n\n            this.rules[name] = {};\n\n            var rules = ['required', 'email', 'tel', 'url'];\n\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var _rule = _step.value;\n\n                    if (input.hasAttribute(_rule) || input.classList.contains(_rule)) {\n                        this.rules[name][_rule] = true;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            if (input.hasAttribute('pattern')) {\n                this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n            }\n\n            this.rules[name] = mergeDeep(this.rules[name], this.options.rules[name]);\n\n            for (var rule in this.rules[name]) {\n                if (this.rules[name][rule]) {\n                    this.fields[name].classList.add(rule);\n                }\n            }\n        }\n    }, {\n        key: 'checkForm',\n        value: function checkForm() {\n            var errors = {};\n\n            for (var name in this.rules) {\n                var inputErrors = this.checkInput(name);\n\n                if (inputErrors.length) {\n                    errors[name] = inputErrors;\n                }\n            }\n\n            return errors;\n        }\n    }, {\n        key: 'checkInput',\n        value: function checkInput(name) {\n            var rules = this.rules[name];\n            var errors = [];\n            var isEmpty = !JediValidate.methods.required.func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name]);\n\n            if (isEmpty && rules.required) {\n                errors.push(this._getErrorMessage(name));\n            } else if (!isEmpty) {\n                for (var method in rules) {\n                    var params = rules[method];\n\n                    if (params) {\n                        if (JediValidate.methods[method]) {\n                            var valid = JediValidate.methods[method].func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name], params);\n\n                            if (!valid) {\n                                errors.push(this._getErrorMessage(name));\n                            }\n                        } else {\n                            errors.push('Method \"' + method + '\" not found');\n                        }\n                    }\n                }\n            }\n\n            if (errors.length) {\n                this._markError(name, errors);\n            } else {\n                this._markValid(name);\n            }\n\n            return errors;\n        }\n    }, {\n        key: '_markError',\n        value: function _markError(name, errors) {\n            if (!this.fields[name] || !this.messages[name]) {\n                return;\n            }\n\n            this.fields[name].classList.add(this.options.states.error);\n            this.fields[name].classList.remove(this.options.states.valid);\n\n            this.messages[name].innerHTML = errors.join(', ');\n        }\n    }, {\n        key: '_markValid',\n        value: function _markValid(name) {\n            if (!this.fields[name] || !this.messages[name]) {\n                return;\n            }\n\n            this.fields[name].classList.add(this.options.states.valid);\n            this.fields[name].classList.remove(this.options.states.error);\n\n            this.messages[name].innerHTML = '';\n        }\n    }, {\n        key: '_getErrorMessage',\n        value: function _getErrorMessage(name) {\n            var message = '';\n\n            if (this.options.messages[name] && this.options.messages[name].required) {\n                message = this.options.messages[name].required;\n            } else {\n                message = JediValidate.methods.required.message;\n            }\n\n            return message;\n        }\n    }], [{\n        key: 'getFormOptions',\n        value: function getFormOptions(form) {\n            var options = { ajax: {} };\n\n            if (form.getAttribute('method')) {\n                options.ajax.method = form.getAttribute('method');\n            }\n\n            if (form.getAttribute('action')) {\n                options.ajax.url = form.getAttribute('action');\n            }\n\n            if (form.getAttribute('enctype')) {\n                options.ajax.enctype = form.getAttribute('enctype');\n            }\n\n            if (options.ajax.enctype === 'multipart/form-data') {\n                options.sendType = 'formData';\n            }\n\n            return options;\n        }\n    }, {\n        key: 'getRadioGroupValue',\n        value: function getRadioGroupValue(elements) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = elements[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var element = _step2.value;\n\n                    var value = JediValidate.getInputValue(element);\n\n                    if (value !== '') {\n                        return value;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            return '';\n        }\n    }, {\n        key: 'parseInputName',\n        value: function parseInputName(name, value) {\n            var re = /(\\[(\\w*)\\]|\\w*)/gi;\n            var matches;\n            var path = [];\n\n            while ((matches = re.exec(name)) !== null) {\n                if (matches.index === re.lastIndex) {\n                    re.lastIndex++;\n                }\n\n                if (matches[2]) {\n                    path.push(matches[2]);\n                } else {\n                    path.push(matches[1]);\n                }\n            }\n\n            return JediValidate.createObject(path, value);\n        }\n    }, {\n        key: 'createObject',\n        value: function createObject(path, value) {\n            var segment = path[0];\n\n            if (segment.length === 0) {\n                return value;\n            } else if (segment === '[]') {\n                return [JediValidate.createObject(path.slice(1), value)];\n            } else {\n                var object = {};\n\n                object[segment] = JediValidate.createObject(path.slice(1), value);\n\n                return object;\n            }\n        }\n    }, {\n        key: 'getInputValue',\n        value: function getInputValue(element) {\n            if (Array.isArray(element)) {\n                return JediValidate.getRadioGroupValue(element);\n            }\n\n            var value = '';\n            var type = element.type;\n\n\n            if (type === 'select-one') {\n                if (element.options.length) {\n                    value = element.options[element.selectedIndex].value;\n                }\n\n                return value;\n            }\n\n            if (type === 'select-multiple') {\n                value = [];\n\n                for (var i = 0; i < element.options.length; i++) {\n                    if (element.options[i].selected) {\n                        value.push(element.options[i].value);\n                    }\n                }\n\n                if (value.length === 0) {\n                    value = '';\n                }\n\n                return value;\n            }\n\n            if (type === 'checkbox' || type === 'radio') {\n                if (element.checked) return element.value;else {\n                    return '';\n                }\n            }\n\n            return element.value;\n        }\n    }]);\n\n    return JediValidate;\n}();\n\nJediValidate.methods = {};\n\nJediValidate.addMethod = function (rule, func, message) {\n    JediValidate.methods[rule] = {\n        func: func,\n        message: message\n    };\n};\n\n// todo languages\n\nJediValidate.addMethod('required', function (value) {\n    return value && value.trim() !== '';\n}, 'Это поле необходимо заполнить');\n\nJediValidate.addMethod('regexp', function (value, element, regexp) {\n    return regexp.test(value);\n}, 'Пожалуйста, введите корректное значение');\n\nJediValidate.addMethod('email', function (value) {\n    return (/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value)\n    );\n}, 'Пожалуйста, введите корректный адрес электронной почты');\n\nJediValidate.addMethod('filesize', function (value, element, size) {\n    return !element.get(0).files[0] || element.get(0).files[0].size <= size;\n}, 'Попробуйте загрузить файл поменьше');\n\nJediValidate.addMethod('extension', function (value, element, extensions) {\n    return !element.get(0).files[0] || extensions.indexOf(element.get(0).files[0].name.split('.').pop()) > -1;\n}, 'Пожалуйста, выберите файл с правильным расширением');\n\nJediValidate.addMethod('tel', function (value) {\n    return (/^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value)\n    );\n}, 'Не корректный номер телефона');\n\nJediValidate.addMethod('url', function (value) {\n    return (/[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value)\n    );\n}, 'Не корректный url');\n\nfunction isObject(item) {\n    return item && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && !Array.isArray(item) && item !== null;\n}\n\nfunction mergeDeep(target, source) {\n    var output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach(function (key) {\n            if (isObject(source[key])) {\n                if (!(key in target)) Object.assign(output, _defineProperty({}, key, source[key]));else output[key] = mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(output, _defineProperty({}, key, source[key]));\n            }\n        });\n    }\n    return output;\n}","class JediValidate {\n    constructor(root, options = {}) {\n        const defaultOptions = {\n            ajax: {\n                url: null,\n                enctype: 'application/x-www-form-urlencoded',\n                method: 'GET'\n            },\n            sendType: 'serialize', // 'formData', 'json'\n            rules: {},\n            messages: {},\n            containers: {\n                parent: 'form-group',\n                message: 'help-block',\n                baseMessage: 'base-error'\n            },\n            states: {\n                error: 'error',\n                valid: 'valid',\n                pristine: 'pristine',\n                dirty: 'dirty'\n            },\n            callbacks: {\n                success: function () {\n                },\n                error: function () {\n                }\n            },\n            clean: true,\n            redirect: true\n        };\n\n        this.root = root;\n\n        this.options = mergeDeep(defaultOptions, options);\n\n        this.fields = {};\n        this.inputs = {};\n        this.messages = {};\n        this.rules = {};\n\n        this._cacheNodes();\n\n        const formOptions = JediValidate.getFormOptions(this.nodes.form);\n\n        this.options = mergeDeep(this.options, defaultOptions);\n        this.options = mergeDeep(this.options, formOptions);\n        this.options = mergeDeep(this.options, options);\n\n        this._ready();\n    }\n\n    static getFormOptions(form) {\n        const options = {ajax: {}};\n\n        if (form.getAttribute('method')) {\n            options.ajax.method = form.getAttribute('method');\n        }\n\n        if (form.getAttribute('action')) {\n            options.ajax.url = form.getAttribute('action');\n        }\n\n        if (form.getAttribute('enctype')) {\n            options.ajax.enctype = form.getAttribute('enctype');\n        }\n\n        if (options.ajax.enctype === 'multipart/form-data') {\n            options.sendType = 'formData';\n        }\n\n        return options;\n    }\n\n    static getRadioGroupValue(elements) {\n        for (let element of elements) {\n            var value = JediValidate.getInputValue(element);\n\n            if (value !== '') {\n                return value;\n            }\n        }\n\n        return '';\n    }\n\n    static parseInputName(name, value) {\n        var re = /(\\[(\\w*)\\]|\\w*)/gi;\n        var matches;\n        var path = [];\n\n        while ((matches = re.exec(name)) !== null) {\n            if (matches.index === re.lastIndex) {\n                re.lastIndex++;\n            }\n\n            if (matches[2]) {\n                path.push(matches[2])\n            } else {\n                path.push(matches[1])\n            }\n        }\n\n        return JediValidate.createObject(path, value);\n    }\n\n    static createObject(path, value) {\n        var segment = path[0];\n\n        if (segment.length === 0) {\n            return value;\n        } else if (segment === '[]') {\n            return [JediValidate.createObject(path.slice(1), value)];\n        } else {\n            var object = {};\n\n            object[segment] = JediValidate.createObject(path.slice(1), value);\n\n            return object;\n        }\n    }\n\n    static getInputValue(element) {\n        if (Array.isArray(element)) {\n            return JediValidate.getRadioGroupValue(element);\n        }\n\n        let value = '';\n        let {type} = element;\n\n        if (type === 'select-one') {\n            if (element.options.length) {\n                value = element.options[element.selectedIndex].value;\n            }\n\n            return value;\n        }\n\n        if (type === 'select-multiple') {\n            value = [];\n\n            for (let i = 0; i < element.options.length; i++) {\n                if (element.options[i].selected) {\n                    value.push(element.options[i].value);\n                }\n            }\n\n            if (value.length === 0) {\n                value = ''\n            }\n\n            return value;\n        }\n\n        if (type === 'checkbox' || type === 'radio') {\n            if (element.checked)\n                return element.value;\n            else {\n                return '';\n            }\n        }\n\n        return element.value;\n    }\n\n    _cacheNodes() {\n        this.nodes = {\n            form: this.root.querySelector('form'),\n            inputs: this.root.querySelectorAll('[name]'),\n            baseMessage: this.root.querySelector(`.${this.options.containers.baseMessage}`),\n        }\n    }\n\n    _ready() {\n        this.nodes.form.setAttribute('novalidate', 'novalidate');\n\n        this.nodes.form.addEventListener('submit', (event) => {\n            var errors = this.checkForm();\n\n            if (Object.keys(errors).length !== 0) {\n                this.options.callbacks.error(errors);\n\n                event.preventDefault();\n                return;\n            }\n\n            if (this.options.ajax) {\n                event.preventDefault();\n            } else {\n                return;\n            }\n\n            this._send();\n        });\n\n        this.nodes.inputs.forEach((input) => {\n            const name = input.name;\n\n            if (this.inputs[name]) {\n                if (Array.isArray(this.inputs[name])) {\n                    this.inputs[name].push(input);\n                } else {\n                    this.inputs[name] = [this.inputs[name], input];\n                }\n            } else {\n                this.inputs[name] = input;\n\n                let field = input.parentNode;\n\n                do {\n                    if (field.classList.contains(this.options.containers.parent)) {\n                        this.fields[name] = field;\n                        break;\n                    }\n                } while (field = field.parentNode);\n\n                if (!this.fields[name]) {\n                    throw 'Have no parent field';\n                }\n\n                this.fields[name].classList.add(this.options.states.pristine);\n\n                var messageElement = this.fields[name].querySelector(`.${this.options.containers.message}`);\n\n                if (messageElement) {\n                    this.messages[name] = messageElement;\n                } else {\n                    this.messages[name] = document.createElement(\"div\");\n                    this.messages[name].classList.add(this.options.containers.message);\n                    this.fields[name].appendChild(this.messages[name]);\n                }\n\n                this._defineRules(name);\n            }\n\n            input.addEventListener('change', () => {\n                this.fields[name].classList.remove(this.options.states.dirty);\n                this.checkInput(name);\n            });\n\n            input.addEventListener('input', () => {\n                this.fields[name].classList.remove(this.options.states.pristine);\n                this.fields[name].classList.add(this.options.states.dirty);\n            });\n        });\n    }\n\n    _send(options) {\n        let data = '';\n        const xhr = new XMLHttpRequest();\n\n        if (this.options.sendType === 'serialize') {\n            for (let name in this.inputs) {\n                data += `${name}=${encodeURIComponent(JediValidate.getInputValue(this.inputs[name]))}&`;\n            }\n\n            data = data.slice(0, -1);\n        } else if (this.options.sendType === 'formData') {\n            data = new FormData(this.nodes.form);\n        } else if (this.options.sendType === 'json') {\n            data = {};\n\n            for (let name in this.inputs) {\n                data = mergeDeep(data, JediValidate.parseInputName(name, JediValidate.getInputValue(this.inputs[name])));\n            }\n\n            data = JSON.stringify(data);\n        }\n\n        xhr.open(this.options.ajax.method, this.options.ajax.url + (this.options.ajax.method.toUpperCase() === 'GET' ? ('?' + data) : ''), true); // todo concat url and params\n\n        if (this.options.sendType === 'serialize') {\n            xhr.setRequestHeader('Content-type', this.options.ajax.enctype);\n        } else if (this.options.sendType === 'json') {\n            xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n        }\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState == 4) {\n                if (xhr.status == 200) {\n                    let response = {};\n\n                    try {\n                        response = JSON.parse(xhr.responseText);\n                    } catch (e) {\n                        response.validationErrors = {base: ['JSON parsing error']};  // todo: language extension\n                    }\n\n                    if (response.validationErrors) {\n                        this.options.callbacks.error(response.validationErrors);\n\n                        if (response.validationErrors.base) {\n                            this.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n                            this.root.classList.add(this.options.states.error);\n                            this.root.classList.remove(this.options.states.valid);\n                            delete response.validationErrors.base;\n                        } else {\n                            this.nodes.baseMessage.innerHTML = '';\n                        }\n\n                        for (let name in response.validationErrors) {\n                            this._markError(name, response.validationErrors[name]);\n                        }\n                    } else {\n                        this.options.callbacks.success(response);\n\n                        if (this.options.redirect && response.redirect) {\n                            window.location.href = response.redirect;\n                            return;\n                        }\n\n                        if (this.options.clean) {\n                            this.nodes.form.reset();\n                        }\n                    }\n                } else {\n                    console.warn(options.method + ' ' + options.url + ' ' + xhr.status + ' (' + xhr.statusText + ')');\n\n                    this.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n                    this.root.classList.add(this.options.states.error);\n                    this.root.classList.remove(this.options.states.valid);\n                }\n            }\n        };\n\n        xhr.send(this.options.ajax.method.toUpperCase() === 'POST' ? data : '');\n    }\n\n    _defineRules(name) {\n        const input = this.inputs[name];\n\n        this.rules[name] = {};\n\n        const rules = ['required', 'email', 'tel', 'url'];\n\n        for (let rule of rules) {\n            if (input.hasAttribute(rule) || input.classList.contains(rule)) {\n                this.rules[name][rule] = true;\n            }\n        }\n\n        if (input.hasAttribute('pattern')) {\n            this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n        }\n\n        this.rules[name] = mergeDeep(this.rules[name], this.options.rules[name]);\n\n        for (let rule in this.rules[name]) {\n            if (this.rules[name][rule]) {\n                this.fields[name].classList.add(rule);\n            }\n        }\n    }\n\n    checkForm() {\n        var errors = {};\n\n        for (let name in this.rules) {\n            var inputErrors = this.checkInput(name);\n\n            if (inputErrors.length) {\n                errors[name] = inputErrors;\n            }\n        }\n\n        return errors;\n    }\n\n    checkInput(name) {\n        const rules = this.rules[name];\n        const errors = [];\n        const isEmpty = !JediValidate.methods.required.func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name]);\n\n        if (isEmpty && rules.required) {\n            errors.push(this._getErrorMessage(name));\n        } else if (!isEmpty) {\n            for (let method in rules) {\n                const params = rules[method];\n\n                if (params) {\n                    if (JediValidate.methods[method]) {\n                        var valid = JediValidate.methods[method].func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name], params);\n\n                        if (!valid) {\n                            errors.push(this._getErrorMessage(name));\n                        }\n                    } else {\n                        errors.push('Method \"' + method + '\" not found');\n                    }\n                }\n            }\n        }\n\n        if (errors.length) {\n            this._markError(name, errors);\n        } else {\n            this._markValid(name);\n        }\n\n        return errors;\n    }\n\n    _markError(name, errors) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.error);\n        this.fields[name].classList.remove(this.options.states.valid);\n\n        this.messages[name].innerHTML = errors.join(', ');\n    }\n\n    _markValid(name) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.valid);\n        this.fields[name].classList.remove(this.options.states.error);\n\n        this.messages[name].innerHTML = '';\n    }\n\n    _getErrorMessage(name) {\n        let message = '';\n\n        if (this.options.messages[name] && this.options.messages[name].required) {\n            message = this.options.messages[name].required;\n        } else {\n            message = JediValidate.methods.required.message;\n        }\n\n        return message;\n    };\n}\n\nJediValidate.methods = {};\n\nJediValidate.addMethod = function (rule, func, message) {\n    JediValidate.methods[rule] = {\n        func: func,\n        message: message\n    };\n};\n\n// todo languages\n\nJediValidate.addMethod('required', function (value) {\n    return (value && value.trim() !== '');\n}, 'Это поле необходимо заполнить');\n\nJediValidate.addMethod('regexp', function (value, element, regexp) {\n    return regexp.test(value);\n}, 'Пожалуйста, введите корректное значение');\n\nJediValidate.addMethod('email', function (value) {\n    return /[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value);\n}, 'Пожалуйста, введите корректный адрес электронной почты');\n\nJediValidate.addMethod('filesize', function (value, element, size) {\n    return !element.get(0).files[0] || element.get(0).files[0].size <= size;\n}, 'Попробуйте загрузить файл поменьше');\n\nJediValidate.addMethod('extension', function (value, element, extensions) {\n    return !element.get(0).files[0] || extensions.indexOf(element.get(0).files[0].name.split('.').pop()) > -1;\n}, 'Пожалуйста, выберите файл с правильным расширением');\n\nJediValidate.addMethod('tel', function (value) {\n    return /^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value);\n}, 'Не корректный номер телефона');\n\nJediValidate.addMethod('url', function (value) {\n    return /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value);\n}, 'Не корректный url');\n\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item) && item !== null);\n}\n\nfunction mergeDeep(target, source) {\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach(key => {\n            if (isObject(source[key])) {\n                if (!(key in target))\n                    Object.assign(output, {[key]: source[key]});\n                else\n                    output[key] = mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(output, {[key]: source[key]});\n            }\n        });\n    }\n    return output;\n}"],"sourceRoot":"/source/"}