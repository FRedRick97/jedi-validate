{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///jedi-validate.min.js","webpack:///webpack/bootstrap 25d445e791e4aa1986ab?faba","webpack:///./src/jedi-validate.es6?dec3","webpack:///./~/deepmerge/index.js?4ee7","webpack:///./src/i18n/jedi-validate-i18n.es6?63a0","webpack:///./src/i18n/jedi-validate-i18n-data.json?59ee"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_deepmerge","_deepmerge2","_jediValidateI18n","_jediValidateI18n2","JediValidate","options","arguments","undefined","defaultOptions","ajax","url","enctype","sendType","method","rules","messages","containers","parent","message","baseMessage","states","error","valid","pristine","dirty","formStatePrefix","callbacks","success","clean","redirect","fields","inputs","_cacheNodes","formOptions","getFormOptions","nodes","form","_ready","value","querySelector","querySelectorAll","_this","setAttribute","addEventListener","event","errors","checkForm","keys","preventDefault","data","getData","_send","forEach","input","name","Array","isArray","push","field","parentNode","classList","contains","add","messageElement","document","createElement","appendChild","_defineRules","remove","checkInput","_this2","xhr","XMLHttpRequest","open","toUpperCase","setRequestHeader","onreadystatechange","readyState","status","response","JSON","parse","responseText","e","validationErrors","base","innerHTML","join","_markError","window","location","href","reset","console","warn","statusText","send","encodeURIComponent","getInputValue","slice","FormData","type","hasAttribute","files","append","index","parseInputName","stringify","ruleName","rule","regexp","RegExp","getAttribute","inputErrors","isEmpty","methods","required","func","_getErrorMessage","params","_markValid","elements","element","matches","re","path","exec","lastIndex","createObject","segment","object","getRadioGroupValue","selectedIndex","selected","checked","addMethod","trim","test","size","reduce","r","file","extensions","indexOf","split","pop","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","deepmerge","src","array","dst","concat","setLanguage","currentLang","translate","text","lang","dictionary","ru","This field is required","Please, provide correct value","This email is incorrect","This file is too large","This extension is not supported","This phone number is incorrect","Wrong url"],"mappings":"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","file":"jedi-validate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JediValidate\"] = factory();\n\telse\n\t\troot[\"JediValidate\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JediValidate\"] = factory();\n\telse\n\t\troot[\"JediValidate\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _deepmerge = __webpack_require__(1);\n\t\n\tvar _deepmerge2 = _interopRequireDefault(_deepmerge);\n\t\n\tvar _jediValidateI18n = __webpack_require__(2);\n\t\n\tvar _jediValidateI18n2 = _interopRequireDefault(_jediValidateI18n);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar JediValidate = function () {\n\t    function JediValidate(root) {\n\t        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t        _classCallCheck(this, JediValidate);\n\t\n\t        var defaultOptions = {\n\t            ajax: {\n\t                url: null,\n\t                enctype: 'application/x-www-form-urlencoded',\n\t                sendType: 'serialize', // 'formData', 'json'\n\t                method: 'GET'\n\t            },\n\t            rules: {},\n\t            messages: {},\n\t            containers: {\n\t                parent: 'form-group',\n\t                message: 'help-block',\n\t                baseMessage: 'base-error'\n\t            },\n\t            states: {\n\t                error: 'error',\n\t                valid: 'valid',\n\t                pristine: 'pristine',\n\t                dirty: 'dirty'\n\t            },\n\t            formStatePrefix: 'jedi-',\n\t            callbacks: {\n\t                success: function success() {},\n\t                error: function error() {}\n\t            },\n\t            clean: true,\n\t            redirect: true\n\t        };\n\t\n\t        this.root = root;\n\t\n\t        this.options = (0, _deepmerge2.default)(defaultOptions, options);\n\t\n\t        this.fields = {};\n\t        this.inputs = {};\n\t        this.messages = {};\n\t        this.rules = {};\n\t\n\t        this._cacheNodes();\n\t\n\t        var formOptions = JediValidate.getFormOptions(this.nodes.form);\n\t\n\t        this.options = (0, _deepmerge2.default)(this.options, defaultOptions);\n\t        this.options = (0, _deepmerge2.default)(this.options, formOptions);\n\t        this.options = (0, _deepmerge2.default)(this.options, options);\n\t\n\t        this._ready();\n\t    }\n\t\n\t    _createClass(JediValidate, [{\n\t        key: '_cacheNodes',\n\t        value: function _cacheNodes() {\n\t            this.nodes = {\n\t                form: this.root.querySelector('form'),\n\t                inputs: this.root.querySelectorAll('[name]'),\n\t                baseMessage: this.root.querySelector('.' + this.options.containers.baseMessage)\n\t            };\n\t        }\n\t    }, {\n\t        key: '_ready',\n\t        value: function _ready() {\n\t            var _this = this;\n\t\n\t            this.nodes.form.setAttribute('novalidate', 'novalidate');\n\t\n\t            this.nodes.form.addEventListener('submit', function (event) {\n\t                var errors = _this.checkForm();\n\t\n\t                if (Object.keys(errors).length !== 0) {\n\t                    _this.options.callbacks.error(errors);\n\t\n\t                    event.preventDefault();\n\t                    return;\n\t                }\n\t\n\t                if (_this.options.ajax && _this.options.ajax.url) {\n\t                    event.preventDefault();\n\t                } else {\n\t                    _this.options.callbacks.success(errors, event);\n\t\n\t                    return;\n\t                }\n\t\n\t                var data = _this.getData();\n\t\n\t                _this._send((0, _deepmerge2.default)(_this.options.ajax, { data: data }));\n\t            });\n\t\n\t            this.nodes.inputs.forEach(function (input) {\n\t                var name = input.name;\n\t\n\t                if (_this.inputs[name]) {\n\t                    if (Array.isArray(_this.inputs[name])) {\n\t                        _this.inputs[name].push(input);\n\t                    } else {\n\t                        _this.inputs[name] = [_this.inputs[name], input];\n\t                    }\n\t                } else {\n\t                    _this.inputs[name] = input;\n\t\n\t                    var field = input.parentNode;\n\t\n\t                    do {\n\t                        if (field.classList.contains(_this.options.containers.parent)) {\n\t                            _this.fields[name] = field;\n\t                            break;\n\t                        }\n\t                    } while (field = field.parentNode);\n\t\n\t                    if (!_this.fields[name]) {\n\t                        throw 'Have no parent field';\n\t                    }\n\t\n\t                    _this.fields[name].classList.add(_this.options.states.pristine);\n\t\n\t                    var messageElement = _this.fields[name].querySelector('.' + _this.options.containers.message);\n\t\n\t                    if (messageElement) {\n\t                        _this.messages[name] = messageElement;\n\t                    } else {\n\t                        _this.messages[name] = document.createElement('div');\n\t                        _this.messages[name].classList.add(_this.options.containers.message);\n\t                        _this.fields[name].appendChild(_this.messages[name]);\n\t                    }\n\t\n\t                    _this._defineRules(name);\n\t                }\n\t\n\t                input.addEventListener('change', function () {\n\t                    _this.fields[name].classList.remove(_this.options.states.dirty);\n\t                    _this.checkInput(name);\n\t                });\n\t\n\t                input.addEventListener('input', function () {\n\t                    _this.fields[name].classList.remove(_this.options.states.pristine);\n\t                    _this.fields[name].classList.add(_this.options.states.dirty);\n\t                });\n\t            });\n\t        }\n\t    }, {\n\t        key: '_send',\n\t        value: function _send(options) {\n\t            var _this2 = this;\n\t\n\t            var xhr = new XMLHttpRequest();\n\t\n\t            xhr.open(options.method, options.url + (options.method.toUpperCase() === 'GET' ? '?' + options.data : ''), true); // todo concat url and params\n\t\n\t            if (options.sendType === 'serialize') {\n\t                xhr.setRequestHeader('Content-type', options.enctype);\n\t            } else if (options.sendType === 'json') {\n\t                xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n\t            }\n\t\n\t            xhr.onreadystatechange = function () {\n\t                if (xhr.readyState == 4) {\n\t                    if (xhr.status == 200) {\n\t                        var response = {};\n\t\n\t                        try {\n\t                            response = JSON.parse(xhr.responseText);\n\t                        } catch (e) {\n\t                            response.validationErrors = { base: ['JSON parsing error'] }; // todo: language extension\n\t                        }\n\t\n\t                        if (response.validationErrors) {\n\t                            _this2.options.callbacks.error(response.validationErrors);\n\t\n\t                            if (response.validationErrors.base) {\n\t                                _this2.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n\t                                _this2.root.classList.add(_this2.options.formStatePrefix + _this2.options.states.error);\n\t                                _this2.root.classList.remove(_this2.options.formStatePrefix + _this2.options.states.valid);\n\t                                delete response.validationErrors.base;\n\t                            } else {\n\t                                _this2.nodes.baseMessage.innerHTML = '';\n\t                            }\n\t\n\t                            for (var name in response.validationErrors) {\n\t                                _this2._markError(name, response.validationErrors[name]);\n\t                            }\n\t                        } else {\n\t                            _this2.options.callbacks.success(response);\n\t\n\t                            if (_this2.options.redirect && response.redirect) {\n\t                                window.location.href = response.redirect;\n\t                                return;\n\t                            }\n\t\n\t                            if (_this2.options.clean) {\n\t                                _this2.nodes.form.reset();\n\t                            }\n\t                        }\n\t                    } else {\n\t                        console.warn(options.method + ' ' + options.url + ' ' + xhr.status + ' (' + xhr.statusText + ')');\n\t\n\t                        _this2.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n\t                        _this2.root.classList.add(_this2.options.formStatePrefix + _this2.options.states.error);\n\t                        _this2.root.classList.remove(_this2.options.formStatePrefix + _this2.options.states.valid);\n\t                    }\n\t                }\n\t            };\n\t\n\t            xhr.send(options.method.toUpperCase() === 'POST' ? options.data : '');\n\t        }\n\t    }, {\n\t        key: 'getData',\n\t        value: function getData() {\n\t            var data = '';\n\t\n\t            if (this.options.sendType === 'serialize') {\n\t                for (var name in this.inputs) {\n\t                    data += name + '=' + encodeURIComponent(JediValidate.getInputValue(this.inputs[name])) + '&';\n\t                }\n\t\n\t                data = data.slice(0, -1);\n\t            } else if (this.options.sendType === 'formData') {\n\t                data = new FormData();\n\t\n\t                for (var _name in this.inputs) {\n\t                    if (this.inputs[_name].type && this.inputs[_name].type === 'file') {\n\t                        if (this.inputs[_name].hasAttribute('multiple')) {\n\t                            for (var i = 0; i < this.inputs[_name].files.length; i++) {\n\t                                data.append(_name + '[]', this.inputs[_name].files[i]);\n\t                            }\n\t                        } else {\n\t                            data.append(_name, this.inputs[_name].files[0]);\n\t                        }\n\t                    } else {\n\t                        data.append(_name, JediValidate.getInputValue(this.inputs[_name]));\n\t                    }\n\t                }\n\t            } else if (this.options.sendType === 'json') {\n\t                data = {};\n\t\n\t                for (var index in this.nodes.inputs) {\n\t                    var input = this.nodes.inputs[index];\n\t\n\t                    data = (0, _deepmerge2.default)(data, JediValidate.parseInputName(input.name, JediValidate.getInputValue(input)));\n\t                }\n\t\n\t                data = JSON.stringify(data);\n\t            }\n\t\n\t            return data;\n\t        }\n\t    }, {\n\t        key: '_defineRules',\n\t        value: function _defineRules(name) {\n\t            var input = this.inputs[name];\n\t\n\t            this.rules[name] = {};\n\t\n\t            var rules = ['required', 'email', 'tel', 'url'];\n\t\n\t            for (var ruleName in rules) {\n\t                var rule = rules[ruleName];\n\t\n\t                if (input.hasAttribute(rule) || input.type === rule || input.classList.contains(rule)) {\n\t                    this.rules[name][rule] = true;\n\t                }\n\t            }\n\t\n\t            if (input.hasAttribute('pattern')) {\n\t                this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n\t            }\n\t\n\t            if (this.options.rules[name]) this.rules[name] = (0, _deepmerge2.default)(this.rules[name], this.options.rules[name]);\n\t\n\t            for (var _rule in this.rules[name]) {\n\t                if (this.rules[name][_rule]) {\n\t                    this.fields[name].classList.add(_rule);\n\t                }\n\t            }\n\t        }\n\t    }, {\n\t        key: 'checkForm',\n\t        value: function checkForm() {\n\t            var errors = {};\n\t\n\t            for (var name in this.rules) {\n\t                var inputErrors = this.checkInput(name);\n\t\n\t                if (inputErrors.length) {\n\t                    errors[name] = inputErrors;\n\t                }\n\t            }\n\t\n\t            return errors;\n\t        }\n\t    }, {\n\t        key: 'checkInput',\n\t        value: function checkInput(name) {\n\t            var rules = this.rules[name];\n\t            var errors = [];\n\t            var isEmpty = !JediValidate.methods.required.func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name]);\n\t\n\t            if (isEmpty && rules.required) {\n\t                errors.push(this._getErrorMessage(name, 'required'));\n\t            } else if (!isEmpty) {\n\t                for (var method in rules) {\n\t                    var params = rules[method];\n\t\n\t                    if (params) {\n\t                        if (JediValidate.methods[method]) {\n\t                            var valid = JediValidate.methods[method].func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name], params);\n\t\n\t                            if (!valid) {\n\t                                errors.push(this._getErrorMessage(name, method));\n\t                            }\n\t                        } else {\n\t                            errors.push('Method \"' + method + '\" not found');\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            if (errors.length) {\n\t                this._markError(name, errors);\n\t            } else {\n\t                this._markValid(name);\n\t            }\n\t\n\t            return errors;\n\t        }\n\t    }, {\n\t        key: '_markError',\n\t        value: function _markError(name, errors) {\n\t            if (!this.fields[name] || !this.messages[name]) {\n\t                return;\n\t            }\n\t\n\t            this.fields[name].classList.add(this.options.states.error);\n\t            this.fields[name].classList.remove(this.options.states.valid);\n\t\n\t            this.messages[name].innerHTML = errors.join(', ');\n\t        }\n\t    }, {\n\t        key: '_markValid',\n\t        value: function _markValid(name) {\n\t            if (!this.fields[name] || !this.messages[name]) {\n\t                return;\n\t            }\n\t\n\t            this.fields[name].classList.add(this.options.states.valid);\n\t            this.fields[name].classList.remove(this.options.states.error);\n\t\n\t            this.messages[name].innerHTML = '';\n\t        }\n\t    }, {\n\t        key: '_getErrorMessage',\n\t        value: function _getErrorMessage(name, method) {\n\t            var message = '';\n\t\n\t            if (this.options.messages[name] && this.options.messages[name][method]) {\n\t                message = this.options.messages[name][method];\n\t            } else {\n\t                message = JediValidate.methods[method].message;\n\t            }\n\t\n\t            return message;\n\t        }\n\t    }], [{\n\t        key: 'getFormOptions',\n\t        value: function getFormOptions(form) {\n\t            var options = { ajax: {} };\n\t\n\t            if (form.getAttribute('method')) {\n\t                options.ajax.method = form.getAttribute('method');\n\t            }\n\t\n\t            if (form.getAttribute('action')) {\n\t                options.ajax.url = form.getAttribute('action');\n\t            }\n\t\n\t            if (form.getAttribute('enctype')) {\n\t                options.ajax.enctype = form.getAttribute('enctype');\n\t            }\n\t\n\t            if (options.ajax.enctype === 'multipart/form-data') {\n\t                options.ajax.sendType = 'formData';\n\t            }\n\t\n\t            return options;\n\t        }\n\t    }, {\n\t        key: 'getRadioGroupValue',\n\t        value: function getRadioGroupValue(elements) {\n\t            for (var index in elements) {\n\t                var element = elements[index];\n\t\n\t                var value = JediValidate.getInputValue(element);\n\t\n\t                if (value !== '') {\n\t                    return value;\n\t                }\n\t            }\n\t\n\t            return '';\n\t        }\n\t    }, {\n\t        key: 'parseInputName',\n\t        value: function parseInputName(name, value) {\n\t            var re = /(\\[(\\w*)\\]|\\w*)/gi;\n\t            var matches;\n\t            var path = [];\n\t\n\t            while ((matches = re.exec(name)) !== null) {\n\t                if (matches.index === re.lastIndex) {\n\t                    re.lastIndex++;\n\t                }\n\t\n\t                if (matches[2]) {\n\t                    path.push(matches[2]);\n\t                } else {\n\t                    path.push(matches[1]);\n\t                }\n\t            }\n\t\n\t            return JediValidate.createObject(path, value);\n\t        }\n\t    }, {\n\t        key: 'createObject',\n\t        value: function createObject(path, value) {\n\t            var segment = path[0];\n\t\n\t            if (segment.length === 0) {\n\t                return value;\n\t            } else if (segment === '[]') {\n\t                return [JediValidate.createObject(path.slice(1), value)];\n\t            } else {\n\t                var object = {};\n\t\n\t                object[segment] = JediValidate.createObject(path.slice(1), value);\n\t\n\t                return object;\n\t            }\n\t        }\n\t    }, {\n\t        key: 'getInputValue',\n\t        value: function getInputValue(element) {\n\t            if (Array.isArray(element)) {\n\t                return JediValidate.getRadioGroupValue(element);\n\t            }\n\t\n\t            var value = '';\n\t            var type = element.type;\n\t\n\t\n\t            if (type === 'select-one') {\n\t                if (element.options.length) {\n\t                    value = element.options[element.selectedIndex].value;\n\t                }\n\t\n\t                return value;\n\t            }\n\t\n\t            if (type === 'select-multiple') {\n\t                value = [];\n\t\n\t                for (var i = 0; i < element.options.length; i++) {\n\t                    if (element.options[i].selected) {\n\t                        value.push(element.options[i].value);\n\t                    }\n\t                }\n\t\n\t                if (value.length === 0) {\n\t                    value = '';\n\t                }\n\t\n\t                return value;\n\t            }\n\t\n\t            if (type === 'checkbox' || type === 'radio') {\n\t                if (element.checked) return element.value;else {\n\t                    return '';\n\t                }\n\t            }\n\t\n\t            return element.value;\n\t        }\n\t    }]);\n\t\n\t    return JediValidate;\n\t}();\n\t\n\tJediValidate.methods = {};\n\t\n\tJediValidate.addMethod = function (rule, func, message) {\n\t    JediValidate.methods[rule] = {\n\t        func: func,\n\t        message: message\n\t    };\n\t};\n\t\n\t// todo languages\n\t\n\tJediValidate.addMethod('required', function (value) {\n\t    return value && value.trim() !== '';\n\t}, (0, _jediValidateI18n2.default)('This field is required'));\n\t\n\tJediValidate.addMethod('regexp', function (value, element, regexp) {\n\t    return regexp.test(value);\n\t}, (0, _jediValidateI18n2.default)('Please, provide correct value'));\n\t\n\tJediValidate.addMethod('email', function (value) {\n\t    return (/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value)\n\t    );\n\t}, (0, _jediValidateI18n2.default)('This email is incorrect'));\n\t\n\tJediValidate.addMethod('filesize', function (value, element, size) {\n\t    return Array.prototype.slice.call(element.files).reduce(function (r, file) {\n\t        return file.size < size && r;\n\t    }, true);\n\t}, (0, _jediValidateI18n2.default)('This file is too large'));\n\t\n\tJediValidate.addMethod('extension', function (value, element, extensions) {\n\t    return Array.prototype.slice.call(element.files).reduce(function (r, file) {\n\t        return extensions.indexOf(file.name.split('.').pop()) !== -1 && r;\n\t    }, true);\n\t}, (0, _jediValidateI18n2.default)('This extension is not supported'));\n\t\n\tJediValidate.addMethod('tel', function (value) {\n\t    return (/^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value)\n\t    );\n\t}, (0, _jediValidateI18n2.default)('This phone number is incorrect'));\n\t\n\tJediValidate.addMethod('url', function (value) {\n\t    return (/[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value)\n\t    );\n\t}, (0, _jediValidateI18n2.default)('Wrong url'));\n\t\n\tmodule.exports = JediValidate;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports === 'object') {\n\t        module.exports = factory();\n\t    } else {\n\t        root.deepmerge = factory();\n\t    }\n\t}(this, function () {\n\t\n\treturn function deepmerge(target, src) {\n\t    var array = Array.isArray(src);\n\t    var dst = array && [] || {};\n\t\n\t    if (array) {\n\t        target = target || [];\n\t        dst = dst.concat(target);\n\t        src.forEach(function(e, i) {\n\t            if (typeof dst[i] === 'undefined') {\n\t                dst[i] = e;\n\t            } else if (typeof e === 'object') {\n\t                dst[i] = deepmerge(target[i], e);\n\t            } else {\n\t                if (target.indexOf(e) === -1) {\n\t                    dst.push(e);\n\t                }\n\t            }\n\t        });\n\t    } else {\n\t        if (target && typeof target === 'object') {\n\t            Object.keys(target).forEach(function (key) {\n\t                dst[key] = target[key];\n\t            })\n\t        }\n\t        Object.keys(src).forEach(function (key) {\n\t            if (typeof src[key] !== 'object' || !src[key]) {\n\t                dst[key] = src[key];\n\t            }\n\t            else {\n\t                if (!target[key]) {\n\t                    dst[key] = src[key];\n\t                } else {\n\t                    dst[key] = deepmerge(target[key], src[key]);\n\t                }\n\t            }\n\t        });\n\t    }\n\t\n\t    return dst;\n\t}\n\t\n\t}));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.setLanguage = setLanguage;\n\texports.default = translate;\n\tvar dictionary = __webpack_require__(3);\n\t\n\tvar currentLang = \"ru\";\n\t\n\tfunction setLanguage(id) {\n\t    currentLang = id;\n\t}\n\t\n\tfunction translate(text) {\n\t    var lang = arguments.length <= 1 || arguments[1] === undefined ? currentLang : arguments[1];\n\t\n\t    return dictionary[lang] && dictionary[lang][text] || text;\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"ru\": {\n\t\t\t\"This field is required\": \"Это поле необходимо заполнить\",\n\t\t\t\"Please, provide correct value\": \"Пожалуйста, введите корректное значение\",\n\t\t\t\"This email is incorrect\": \"Пожалуйста, введите корректный адрес электронной почты\",\n\t\t\t\"This file is too large\": \"Попробуйте загрузить файл поменьше\",\n\t\t\t\"This extension is not supported\": \"Пожалуйста, выберите файл с правильным расширением\",\n\t\t\t\"This phone number is incorrect\": \"Не корректный номер телефона\",\n\t\t\t\"Wrong url\": \"Не корректный url\"\n\t\t}\n\t};\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** jedi-validate.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 25d445e791e4aa1986ab\n **/","import deepmerge from 'deepmerge';\nimport translate from './i18n/jedi-validate-i18n.es6';\n\nclass JediValidate {\n    constructor(root, options = {}) {\n        const defaultOptions = {\n            ajax: {\n                url: null,\n                enctype: 'application/x-www-form-urlencoded',\n                sendType: 'serialize', // 'formData', 'json'\n                method: 'GET'\n            },\n            rules: {},\n            messages: {},\n            containers: {\n                parent: 'form-group',\n                message: 'help-block',\n                baseMessage: 'base-error'\n            },\n            states: {\n                error: 'error',\n                valid: 'valid',\n                pristine: 'pristine',\n                dirty: 'dirty'\n            },\n            formStatePrefix: 'jedi-',\n            callbacks: {\n                success: function () {\n                },\n                error: function () {\n                }\n            },\n            clean: true,\n            redirect: true\n        };\n\n        this.root = root;\n\n        this.options = deepmerge(defaultOptions, options);\n\n        this.fields = {};\n        this.inputs = {};\n        this.messages = {};\n        this.rules = {};\n\n        this._cacheNodes();\n\n        const formOptions = JediValidate.getFormOptions(this.nodes.form);\n\n        this.options = deepmerge(this.options, defaultOptions);\n        this.options = deepmerge(this.options, formOptions);\n        this.options = deepmerge(this.options, options);\n\n        this._ready();\n    }\n\n    static getFormOptions(form) {\n        const options = {ajax: {}};\n\n        if (form.getAttribute('method')) {\n            options.ajax.method = form.getAttribute('method');\n        }\n\n        if (form.getAttribute('action')) {\n            options.ajax.url = form.getAttribute('action');\n        }\n\n        if (form.getAttribute('enctype')) {\n            options.ajax.enctype = form.getAttribute('enctype');\n        }\n\n        if (options.ajax.enctype === 'multipart/form-data') {\n            options.ajax.sendType = 'formData';\n        }\n\n        return options;\n    }\n\n    static getRadioGroupValue(elements) {\n        for (let index in elements) {\n            let element = elements[index];\n\n            var value = JediValidate.getInputValue(element);\n\n            if (value !== '') {\n                return value;\n            }\n        }\n\n        return '';\n    }\n\n    static parseInputName(name, value) {\n        var re = /(\\[(\\w*)\\]|\\w*)/gi;\n        var matches;\n        var path = [];\n\n        while ((matches = re.exec(name)) !== null) {\n            if (matches.index === re.lastIndex) {\n                re.lastIndex++;\n            }\n\n            if (matches[2]) {\n                path.push(matches[2]);\n            } else {\n                path.push(matches[1]);\n            }\n        }\n\n        return JediValidate.createObject(path, value);\n    }\n\n    static createObject(path, value) {\n        var segment = path[0];\n\n        if (segment.length === 0) {\n            return value;\n        } else if (segment === '[]') {\n            return [JediValidate.createObject(path.slice(1), value)];\n        } else {\n            var object = {};\n\n            object[segment] = JediValidate.createObject(path.slice(1), value);\n\n            return object;\n        }\n    }\n\n    static getInputValue(element) {\n        if (Array.isArray(element)) {\n            return JediValidate.getRadioGroupValue(element);\n        }\n\n        let value = '';\n        let {type} = element;\n\n        if (type === 'select-one') {\n            if (element.options.length) {\n                value = element.options[element.selectedIndex].value;\n            }\n\n            return value;\n        }\n\n        if (type === 'select-multiple') {\n            value = [];\n\n            for (let i = 0; i < element.options.length; i++) {\n                if (element.options[i].selected) {\n                    value.push(element.options[i].value);\n                }\n            }\n\n            if (value.length === 0) {\n                value = '';\n            }\n\n            return value;\n        }\n\n        if (type === 'checkbox' || type === 'radio') {\n            if (element.checked)\n                return element.value;\n            else {\n                return '';\n            }\n        }\n\n        return element.value;\n    }\n\n    _cacheNodes() {\n        this.nodes = {\n            form: this.root.querySelector('form'),\n            inputs: this.root.querySelectorAll('[name]'),\n            baseMessage: this.root.querySelector(`.${this.options.containers.baseMessage}`)\n        };\n    }\n\n    _ready() {\n        this.nodes.form.setAttribute('novalidate', 'novalidate');\n\n        this.nodes.form.addEventListener('submit', (event) => {\n            var errors = this.checkForm();\n\n            if (Object.keys(errors).length !== 0) {\n                this.options.callbacks.error(errors);\n\n                event.preventDefault();\n                return;\n            }\n\n            if (this.options.ajax && this.options.ajax.url) {\n                event.preventDefault();\n            } else {\n                this.options.callbacks.success(errors, event);\n\n                return;\n            }\n\n            const data = this.getData();\n\n            this._send(deepmerge(this.options.ajax, {data: data}));\n        });\n\n        this.nodes.inputs.forEach((input) => {\n            const name = input.name;\n\n            if (this.inputs[name]) {\n                if (Array.isArray(this.inputs[name])) {\n                    this.inputs[name].push(input);\n                } else {\n                    this.inputs[name] = [this.inputs[name], input];\n                }\n            } else {\n                this.inputs[name] = input;\n\n                let field = input.parentNode;\n\n                do {\n                    if (field.classList.contains(this.options.containers.parent)) {\n                        this.fields[name] = field;\n                        break;\n                    }\n                } while (field = field.parentNode);\n\n                if (!this.fields[name]) {\n                    throw 'Have no parent field';\n                }\n\n                this.fields[name].classList.add(this.options.states.pristine);\n\n                var messageElement = this.fields[name].querySelector(`.${this.options.containers.message}`);\n\n                if (messageElement) {\n                    this.messages[name] = messageElement;\n                } else {\n                    this.messages[name] = document.createElement('div');\n                    this.messages[name].classList.add(this.options.containers.message);\n                    this.fields[name].appendChild(this.messages[name]);\n                }\n\n                this._defineRules(name);\n            }\n\n            input.addEventListener('change', () => {\n                this.fields[name].classList.remove(this.options.states.dirty);\n                this.checkInput(name);\n            });\n\n            input.addEventListener('input', () => {\n                this.fields[name].classList.remove(this.options.states.pristine);\n                this.fields[name].classList.add(this.options.states.dirty);\n            });\n        });\n    }\n\n    _send(options) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open(options.method, options.url + (options.method.toUpperCase() === 'GET' ? ('?' + options.data) : ''), true); // todo concat url and params\n\n        if (options.sendType === 'serialize') {\n            xhr.setRequestHeader('Content-type', options.enctype);\n        } else if (options.sendType === 'json') {\n            xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n        }\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState == 4) {\n                if (xhr.status == 200) {\n                    let response = {};\n\n                    try {\n                        response = JSON.parse(xhr.responseText);\n                    } catch (e) {\n                        response.validationErrors = {base: ['JSON parsing error']};  // todo: language extension\n                    }\n\n                    if (response.validationErrors) {\n                        this.options.callbacks.error(response.validationErrors);\n\n                        if (response.validationErrors.base) {\n                            this.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n                            this.root.classList.add(this.options.formStatePrefix + this.options.states.error);\n                            this.root.classList.remove(this.options.formStatePrefix + this.options.states.valid);\n                            delete response.validationErrors.base;\n                        } else {\n                            this.nodes.baseMessage.innerHTML = '';\n                        }\n\n                        for (let name in response.validationErrors) {\n                            this._markError(name, response.validationErrors[name]);\n                        }\n                    } else {\n                        this.options.callbacks.success(response);\n\n                        if (this.options.redirect && response.redirect) {\n                            window.location.href = response.redirect;\n                            return;\n                        }\n\n                        if (this.options.clean) {\n                            this.nodes.form.reset();\n                        }\n                    }\n                } else {\n                    console.warn(options.method + ' ' + options.url + ' ' + xhr.status + ' (' + xhr.statusText + ')');\n\n                    this.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n                    this.root.classList.add(this.options.formStatePrefix + this.options.states.error);\n                    this.root.classList.remove(this.options.formStatePrefix + this.options.states.valid);\n                }\n            }\n        };\n\n        xhr.send(options.method.toUpperCase() === 'POST' ? options.data : '');\n    }\n\n    getData() {\n        let data = '';\n\n        if (this.options.sendType === 'serialize') {\n            for (let name in this.inputs) {\n                data += `${name}=${encodeURIComponent(JediValidate.getInputValue(this.inputs[name]))}&`;\n            }\n\n            data = data.slice(0, -1);\n        } else if (this.options.sendType === 'formData') {\n            data = new FormData();\n\n            for (let name in this.inputs) {\n                if (this.inputs[name].type && this.inputs[name].type === 'file') {\n                    if (this.inputs[name].hasAttribute('multiple')) {\n                        for (let i = 0; i < this.inputs[name].files.length; i++) {\n                            data.append(name + '[]', this.inputs[name].files[i]);\n                        }\n                    } else {\n                        data.append(name, this.inputs[name].files[0]);\n                    }\n                } else {\n                    data.append(name, JediValidate.getInputValue(this.inputs[name]));\n                }\n            }\n\n        } else if (this.options.sendType === 'json') {\n            data = {};\n\n            for (let index in this.nodes.inputs) {\n                const input = this.nodes.inputs[index];\n\n                data = deepmerge(data, JediValidate.parseInputName(input.name, JediValidate.getInputValue(input)));\n            }\n\n            data = JSON.stringify(data);\n        }\n\n        return data;\n    }\n\n    _defineRules(name) {\n        const input = this.inputs[name];\n\n        this.rules[name] = {};\n\n        const rules = ['required', 'email', 'tel', 'url'];\n\n        for (let ruleName in rules) {\n            const rule = rules[ruleName];\n\n            if (input.hasAttribute(rule) || input.type === rule || input.classList.contains(rule)) {\n                this.rules[name][rule] = true;\n            }\n        }\n\n        if (input.hasAttribute('pattern')) {\n            this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n        }\n\n        if (this.options.rules[name])\n            this.rules[name] = deepmerge(this.rules[name], this.options.rules[name]);\n\n        for (let rule in this.rules[name]) {\n            if (this.rules[name][rule]) {\n                this.fields[name].classList.add(rule);\n            }\n        }\n    }\n\n    checkForm() {\n        var errors = {};\n\n        for (let name in this.rules) {\n            var inputErrors = this.checkInput(name);\n\n            if (inputErrors.length) {\n                errors[name] = inputErrors;\n            }\n        }\n\n        return errors;\n    }\n\n    checkInput(name) {\n        const rules = this.rules[name];\n        const errors = [];\n        const isEmpty = !JediValidate.methods.required.func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name]);\n\n        if (isEmpty && rules.required) {\n            errors.push(this._getErrorMessage(name, 'required'));\n        } else if (!isEmpty) {\n            for (let method in rules) {\n                const params = rules[method];\n\n                if (params) {\n                    if (JediValidate.methods[method]) {\n                        var valid = JediValidate.methods[method].func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name], params);\n\n                        if (!valid) {\n                            errors.push(this._getErrorMessage(name, method));\n                        }\n                    } else {\n                        errors.push('Method \"' + method + '\" not found');\n                    }\n                }\n            }\n        }\n\n        if (errors.length) {\n            this._markError(name, errors);\n        } else {\n            this._markValid(name);\n        }\n\n        return errors;\n    }\n\n    _markError(name, errors) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.error);\n        this.fields[name].classList.remove(this.options.states.valid);\n\n        this.messages[name].innerHTML = errors.join(', ');\n    }\n\n    _markValid(name) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.valid);\n        this.fields[name].classList.remove(this.options.states.error);\n\n        this.messages[name].innerHTML = '';\n    }\n\n    _getErrorMessage(name, method) {\n        let message = '';\n\n        if (this.options.messages[name] && this.options.messages[name][method]) {\n            message = this.options.messages[name][method];\n        } else {\n            message = JediValidate.methods[method].message;\n        }\n\n        return message;\n    }\n}\n\nJediValidate.methods = {};\n\nJediValidate.addMethod = function (rule, func, message) {\n    JediValidate.methods[rule] = {\n        func: func,\n        message: message\n    };\n};\n\n// todo languages\n\nJediValidate.addMethod('required', function (value) {\n    return (value && value.trim() !== '');\n}, translate('This field is required'));\n\nJediValidate.addMethod('regexp', function (value, element, regexp) {\n    return regexp.test(value);\n}, translate('Please, provide correct value'));\n\nJediValidate.addMethod('email', function (value) {\n    return /[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value);\n}, translate('This email is incorrect'));\n\nJediValidate.addMethod('filesize', function (value, element, size) {\n    return Array.prototype.slice.call(element.files).reduce((r, file) => file.size < size && r, true);\n}, translate('This file is too large'));\n\nJediValidate.addMethod('extension', function (value, element, extensions) {\n    return Array.prototype.slice.call(element.files).reduce((r, file) => extensions.indexOf(file.name.split('.').pop()) !== -1 && r, true);\n}, translate('This extension is not supported'));\n\nJediValidate.addMethod('tel', function (value) {\n    return /^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value);\n}, translate('This phone number is incorrect'));\n\nJediValidate.addMethod('url', function (value) {\n    return /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value);\n}, translate('Wrong url'));\n\nmodule.exports = JediValidate;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/jedi-validate.es6\n **/","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.deepmerge = factory();\n    }\n}(this, function () {\n\nreturn function deepmerge(target, src) {\n    var array = Array.isArray(src);\n    var dst = array && [] || {};\n\n    if (array) {\n        target = target || [];\n        dst = dst.concat(target);\n        src.forEach(function(e, i) {\n            if (typeof dst[i] === 'undefined') {\n                dst[i] = e;\n            } else if (typeof e === 'object') {\n                dst[i] = deepmerge(target[i], e);\n            } else {\n                if (target.indexOf(e) === -1) {\n                    dst.push(e);\n                }\n            }\n        });\n    } else {\n        if (target && typeof target === 'object') {\n            Object.keys(target).forEach(function (key) {\n                dst[key] = target[key];\n            })\n        }\n        Object.keys(src).forEach(function (key) {\n            if (typeof src[key] !== 'object' || !src[key]) {\n                dst[key] = src[key];\n            }\n            else {\n                if (!target[key]) {\n                    dst[key] = src[key];\n                } else {\n                    dst[key] = deepmerge(target[key], src[key]);\n                }\n            }\n        });\n    }\n\n    return dst;\n}\n\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deepmerge/index.js\n ** module id = 1\n ** module chunks = 0 1\n **/","const dictionary = require('./jedi-validate-i18n-data.json');\n\nlet currentLang = \"ru\";\n\nexport function setLanguage(id) {\n    currentLang = id;\n}\n\nexport default function translate(text, lang = currentLang) {\n    return (dictionary[lang] && dictionary[lang][text]) || text;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/i18n/jedi-validate-i18n.es6\n **/","module.exports = {\n\t\"ru\": {\n\t\t\"This field is required\": \"Это поле необходимо заполнить\",\n\t\t\"Please, provide correct value\": \"Пожалуйста, введите корректное значение\",\n\t\t\"This email is incorrect\": \"Пожалуйста, введите корректный адрес электронной почты\",\n\t\t\"This file is too large\": \"Попробуйте загрузить файл поменьше\",\n\t\t\"This extension is not supported\": \"Пожалуйста, выберите файл с правильным расширением\",\n\t\t\"This phone number is incorrect\": \"Не корректный номер телефона\",\n\t\t\"Wrong url\": \"Не корректный url\"\n\t}\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/i18n/jedi-validate-i18n-data.json\n ** module id = 3\n ** module chunks = 0 1\n **/"],"sourceRoot":""}