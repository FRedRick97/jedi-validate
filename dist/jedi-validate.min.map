{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///jedi-validate.min.js","webpack:///webpack/bootstrap 5198423f1913fb13c0f3?8a71","webpack:///./src/jedi-validate.es6?dec3","webpack:///./~/deepmerge/index.js?4ee7","webpack:///./src/i18n/jedi-validate-i18n.es6?63a0","webpack:///./src/i18n/jedi-validate-i18n-data.json?59ee"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_deepmerge","_deepmerge2","_jediValidateI18n","JediValidate","options","arguments","undefined","defaultOptions","ajax","url","enctype","sendType","method","rules","messages","containers","parent","message","baseMessage","states","error","valid","pristine","dirty","formStatePrefix","callbacks","success","clean","redirect","language","fields","inputs","cacheNodes","formOptions","getFormOptions","nodes","form","setLanguage","translations","translation","addTranslation","initMethods","ready","value","querySelector","querySelectorAll","_this","setAttribute","addEventListener","event","errors","checkForm","keys","preventDefault","data","getData","send","forEach","input","name","push","field","parentNode","classList","contains","Error","add","messageElement","document","createElement","appendChild","defineRules","remove","checkInput","_this2","xhr","XMLHttpRequest","open","toUpperCase","setRequestHeader","onreadystatechange","readyState","status","response","JSON","parse","responseText","e","validationErrors","base","innerHTML","join","markError","window","location","href","reset","console","warn","statusText","encodeURIComponent","getInputValue","slice","FormData","type","hasAttribute","files","append","index","parseInputName","stringify","ruleName","rule","regexp","RegExp","getAttribute","inputErrors","isEmpty","methods","required","func","getErrorMessage","params","markValid","addMethod","trim","translate","element","test","size","concat","reduce","r","file","extensions","indexOf","split","pop","elements","re","matches","path","exec","lastIndex","createObject","segment","object","getRadioGroupValue","selectedIndex","valueArray","selected","checked","sourceText","translatedText","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","isMergeableObject","val","nonNullObject","toString","emptyTarget","cloneIfNecessary","optionsArgument","clone","deepmerge","defaultArrayMerge","source","destination","mergeObject","array","arrayMerge","currentLang","text","lang","dictionary","ru","This field is required","Please, provide correct value","This email is incorrect","This file is too large","This extension is not supported","This phone number is incorrect","Wrong url"],"mappings":"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","file":"jedi-validate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JediValidate\"] = factory();\n\telse\n\t\troot[\"JediValidate\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JediValidate\"] = factory();\n\telse\n\t\troot[\"JediValidate\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _deepmerge = __webpack_require__(1);\n\t\n\tvar _deepmerge2 = _interopRequireDefault(_deepmerge);\n\t\n\tvar _jediValidateI18n = __webpack_require__(2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar JediValidate = function () {\n\t    function JediValidate(root) {\n\t        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t        _classCallCheck(this, JediValidate);\n\t\n\t        var defaultOptions = {\n\t            ajax: {\n\t                url: null,\n\t                enctype: 'application/x-www-form-urlencoded',\n\t                sendType: 'serialize', // 'formData', 'json'\n\t                method: 'GET'\n\t            },\n\t            rules: {},\n\t            messages: {},\n\t            containers: {\n\t                parent: 'form-group',\n\t                message: 'help-block',\n\t                baseMessage: 'base-error'\n\t            },\n\t            states: {\n\t                error: 'error',\n\t                valid: 'valid',\n\t                pristine: 'pristine',\n\t                dirty: 'dirty'\n\t            },\n\t            formStatePrefix: 'jedi-',\n\t            callbacks: {\n\t                success: function success() {},\n\t                error: function error() {}\n\t            },\n\t            clean: true,\n\t            redirect: true,\n\t            language: 'en'\n\t        };\n\t\n\t        this.root = root;\n\t\n\t        this.options = (0, _deepmerge2.default)(defaultOptions, options);\n\t\n\t        this.fields = {};\n\t        this.inputs = {};\n\t        this.messages = {};\n\t        this.rules = {};\n\t\n\t        this.cacheNodes();\n\t\n\t        var formOptions = JediValidate.getFormOptions(this.nodes.form);\n\t\n\t        this.options = (0, _deepmerge2.default)(this.options, defaultOptions);\n\t        this.options = (0, _deepmerge2.default)(this.options, formOptions);\n\t        this.options = (0, _deepmerge2.default)(this.options, options);\n\t\n\t        (0, _jediValidateI18n.setLanguage)(options.language);\n\t\n\t        for (var language in options.translations) {\n\t            for (var translation in options.translations[language]) {\n\t                (0, _jediValidateI18n.addTranslation)(translation, options.translations[language][translation], language);\n\t            }\n\t        }\n\t\n\t        this.initMethods();\n\t        this.ready();\n\t    }\n\t\n\t    _createClass(JediValidate, [{\n\t        key: 'cacheNodes',\n\t        value: function cacheNodes() {\n\t            this.nodes = {\n\t                form: this.root.querySelector('form'),\n\t                inputs: this.root.querySelectorAll('[name]'),\n\t                baseMessage: this.root.querySelector('.' + this.options.containers.baseMessage)\n\t            };\n\t        }\n\t    }, {\n\t        key: 'ready',\n\t        value: function ready() {\n\t            var _this = this;\n\t\n\t            this.nodes.form.setAttribute('novalidate', 'novalidate');\n\t\n\t            this.nodes.form.addEventListener('submit', function (event) {\n\t                var errors = _this.checkForm();\n\t\n\t                if (Object.keys(errors).length !== 0) {\n\t                    _this.options.callbacks.error(errors);\n\t\n\t                    event.preventDefault();\n\t                    return;\n\t                }\n\t\n\t                if (_this.options.ajax && _this.options.ajax.url) {\n\t                    event.preventDefault();\n\t                } else {\n\t                    _this.options.callbacks.success(errors, event);\n\t\n\t                    return;\n\t                }\n\t\n\t                var data = _this.getData();\n\t\n\t                _this.send((0, _deepmerge2.default)(_this.options.ajax, { data: data }));\n\t            });\n\t\n\t            this.nodes.inputs.forEach(function (input) {\n\t                var name = input.name;\n\t\n\t                if (_this.inputs[name]) {\n\t                    if (Array.isArray(_this.inputs[name])) {\n\t                        _this.inputs[name].push(input);\n\t                    } else {\n\t                        _this.inputs[name] = [_this.inputs[name], input];\n\t                    }\n\t                } else {\n\t                    _this.inputs[name] = input;\n\t\n\t                    var field = input.parentNode;\n\t\n\t                    do {\n\t                        if (field.classList.contains(_this.options.containers.parent)) {\n\t                            _this.fields[name] = field;\n\t                            break;\n\t                        }\n\t                    } while (field = field.parentNode);\n\t\n\t                    if (!_this.fields[name]) {\n\t                        throw new Error('Have no parent field');\n\t                    }\n\t\n\t                    _this.fields[name].classList.add(_this.options.states.pristine);\n\t\n\t                    var messageElement = _this.fields[name].querySelector('.' + _this.options.containers.message);\n\t\n\t                    if (messageElement) {\n\t                        _this.messages[name] = messageElement;\n\t                    } else {\n\t                        _this.messages[name] = document.createElement('div');\n\t                        _this.messages[name].classList.add(_this.options.containers.message);\n\t                        _this.fields[name].appendChild(_this.messages[name]);\n\t                    }\n\t\n\t                    _this.defineRules(name);\n\t                }\n\t\n\t                input.addEventListener('change', function () {\n\t                    _this.fields[name].classList.remove(_this.options.states.dirty);\n\t                    _this.checkInput(name);\n\t                });\n\t\n\t                input.addEventListener('input', function () {\n\t                    _this.fields[name].classList.remove(_this.options.states.pristine);\n\t                    _this.fields[name].classList.add(_this.options.states.dirty);\n\t                });\n\t            });\n\t        }\n\t    }, {\n\t        key: 'send',\n\t        value: function send(options) {\n\t            var _this2 = this;\n\t\n\t            var xhr = new XMLHttpRequest();\n\t\n\t            xhr.open(options.method, options.url + (options.method.toUpperCase() === 'GET' ? '?' + options.data : ''), true); // todo concat url and params\n\t\n\t            if (options.sendType === 'serialize') {\n\t                xhr.setRequestHeader('Content-type', options.enctype);\n\t            } else if (options.sendType === 'json') {\n\t                xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n\t            }\n\t\n\t            xhr.onreadystatechange = function () {\n\t                if (xhr.readyState === 4) {\n\t                    if (xhr.status === 200) {\n\t                        var response = {};\n\t\n\t                        try {\n\t                            response = JSON.parse(xhr.responseText);\n\t                        } catch (e) {\n\t                            response.validationErrors = { base: ['JSON parsing error'] }; // todo: language extension\n\t                        }\n\t\n\t                        if (response.validationErrors) {\n\t                            _this2.options.callbacks.error(response.validationErrors);\n\t\n\t                            if (response.validationErrors.base) {\n\t                                _this2.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n\t                                _this2.root.classList.add(_this2.options.formStatePrefix + _this2.options.states.error); // eslint-disable-line max-len\n\t                                _this2.root.classList.remove(_this2.options.formStatePrefix + _this2.options.states.valid); // eslint-disable-line max-len\n\t                                delete response.validationErrors.base;\n\t                            } else {\n\t                                _this2.nodes.baseMessage.innerHTML = '';\n\t                            }\n\t\n\t                            for (var name in response.validationErrors) {\n\t                                _this2.markError(name, response.validationErrors[name]);\n\t                            }\n\t                        } else {\n\t                            _this2.options.callbacks.success(response);\n\t\n\t                            if (_this2.options.redirect && response.redirect) {\n\t                                window.location.href = response.redirect;\n\t                                return;\n\t                            }\n\t\n\t                            if (_this2.options.clean) {\n\t                                _this2.nodes.form.reset();\n\t                            }\n\t                        }\n\t                    } else {\n\t                        console.warn(options.method + ' ' + options.url + ' ' + xhr.status + ' (' + xhr.statusText + ')');\n\t\n\t                        _this2.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n\t                        _this2.root.classList.add(_this2.options.formStatePrefix + _this2.options.states.error); // eslint-disable-line max-len\n\t                        _this2.root.classList.remove(_this2.options.formStatePrefix + _this2.options.states.valid); // eslint-disable-line max-len\n\t                    }\n\t                }\n\t            };\n\t\n\t            xhr.send(options.method.toUpperCase() === 'POST' ? options.data : '');\n\t        }\n\t    }, {\n\t        key: 'getData',\n\t        value: function getData() {\n\t            var data = '';\n\t\n\t            if (this.options.sendType === 'serialize') {\n\t                for (var name in this.inputs) {\n\t                    data += name + '=' + encodeURIComponent(JediValidate.getInputValue(this.inputs[name])) + '&';\n\t                }\n\t\n\t                data = data.slice(0, -1);\n\t            } else if (this.options.sendType === 'formData') {\n\t                data = new FormData();\n\t\n\t                for (var _name in this.inputs) {\n\t                    if (this.inputs[_name].type && this.inputs[_name].type === 'file') {\n\t                        if (this.inputs[_name].hasAttribute('multiple')) {\n\t                            for (var i = 0; i < this.inputs[_name].files.length; i += 1) {\n\t                                data.append(_name + '[]', this.inputs[_name].files[i]);\n\t                            }\n\t                        } else {\n\t                            data.append(_name, this.inputs[_name].files[0]);\n\t                        }\n\t                    } else {\n\t                        data.append(_name, JediValidate.getInputValue(this.inputs[_name]));\n\t                    }\n\t                }\n\t            } else if (this.options.sendType === 'json') {\n\t                data = {};\n\t\n\t                for (var index in this.nodes.inputs) {\n\t                    var input = this.nodes.inputs[index];\n\t\n\t                    data = (0, _deepmerge2.default)(data, JediValidate.parseInputName(input.name, JediValidate.getInputValue(input))); // eslint-disable-line max-len\n\t                }\n\t\n\t                data = JSON.stringify(data);\n\t            }\n\t\n\t            return data;\n\t        }\n\t    }, {\n\t        key: 'defineRules',\n\t        value: function defineRules(name) {\n\t            var input = this.inputs[name];\n\t\n\t            this.rules[name] = {};\n\t\n\t            var rules = ['required', 'email', 'tel', 'url'];\n\t\n\t            for (var ruleName in rules) {\n\t                var rule = rules[ruleName];\n\t\n\t                if (input.hasAttribute(rule) || input.type === rule || input.classList.contains(rule)) {\n\t                    this.rules[name][rule] = true;\n\t                }\n\t            }\n\t\n\t            if (input.hasAttribute('pattern')) {\n\t                this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n\t            }\n\t\n\t            if (this.options.rules[name]) {\n\t                this.rules[name] = (0, _deepmerge2.default)(this.rules[name], this.options.rules[name]);\n\t            }\n\t\n\t            for (var _rule in this.rules[name]) {\n\t                if (this.rules[name][_rule]) {\n\t                    this.fields[name].classList.add(_rule);\n\t                }\n\t            }\n\t        }\n\t    }, {\n\t        key: 'checkForm',\n\t        value: function checkForm() {\n\t            var errors = {};\n\t\n\t            for (var name in this.rules) {\n\t                var inputErrors = this.checkInput(name);\n\t\n\t                if (inputErrors.length) {\n\t                    errors[name] = inputErrors;\n\t                }\n\t            }\n\t\n\t            return errors;\n\t        }\n\t    }, {\n\t        key: 'checkInput',\n\t        value: function checkInput(name) {\n\t            var rules = this.rules[name];\n\t            var errors = [];\n\t            var isEmpty = !this.methods.required.func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name]); // eslint-disable-line max-len\n\t\n\t            if (isEmpty && rules.required) {\n\t                errors.push(this.getErrorMessage(name, 'required'));\n\t            } else if (!isEmpty) {\n\t                for (var method in rules) {\n\t                    var params = rules[method];\n\t\n\t                    if (params) {\n\t                        if (this.methods[method]) {\n\t                            var valid = this.methods[method].func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name], params); // eslint-disable-line max-len\n\t\n\t                            if (!valid) {\n\t                                errors.push(this.getErrorMessage(name, method));\n\t                            }\n\t                        } else {\n\t                            errors.push('Method \"' + method + '\" not found');\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            if (errors.length) {\n\t                this.markError(name, errors);\n\t            } else {\n\t                this.markValid(name);\n\t            }\n\t\n\t            return errors;\n\t        }\n\t    }, {\n\t        key: 'markError',\n\t        value: function markError(name, errors) {\n\t            if (!this.fields[name] || !this.messages[name]) {\n\t                return;\n\t            }\n\t\n\t            this.fields[name].classList.add(this.options.states.error);\n\t            this.fields[name].classList.remove(this.options.states.valid);\n\t\n\t            this.messages[name].innerHTML = errors.join(', ');\n\t        }\n\t    }, {\n\t        key: 'markValid',\n\t        value: function markValid(name) {\n\t            if (!this.fields[name] || !this.messages[name]) {\n\t                return;\n\t            }\n\t\n\t            this.fields[name].classList.add(this.options.states.valid);\n\t            this.fields[name].classList.remove(this.options.states.error);\n\t\n\t            this.messages[name].innerHTML = '';\n\t        }\n\t    }, {\n\t        key: 'getErrorMessage',\n\t        value: function getErrorMessage(name, method) {\n\t            var message = '';\n\t\n\t            if (this.options.messages[name] && this.options.messages[name][method]) {\n\t                message = this.options.messages[name][method];\n\t            } else {\n\t                message = this.methods[method].message;\n\t            }\n\t\n\t            return message;\n\t        }\n\t    }, {\n\t        key: 'addMethod',\n\t        value: function addMethod(rule, func, message) {\n\t            this.methods[rule] = {\n\t                func: func,\n\t                message: message\n\t            };\n\t        }\n\t    }, {\n\t        key: 'initMethods',\n\t        value: function initMethods() {\n\t            this.methods = {};\n\t\n\t            this.addMethod('required', function (value) {\n\t                return value && value.trim() !== '';\n\t            }, (0, _jediValidateI18n.translate)('This field is required'));\n\t\n\t            this.addMethod('regexp', function (value, element, regexp) {\n\t                return regexp.test(value);\n\t            }, (0, _jediValidateI18n.translate)('Please, provide correct value'));\n\t\n\t            this.addMethod('email', function (value) {\n\t                return (/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value)\n\t                );\n\t            }, (0, _jediValidateI18n.translate)('This email is incorrect'));\n\t\n\t            this.addMethod('filesize', function (value, element, size) {\n\t                return [].concat(_toConsumableArray(element.files)).reduce(function (r, file) {\n\t                    return file.size < size && r;\n\t                }, true);\n\t            }, (0, _jediValidateI18n.translate)('This file is too large'));\n\t\n\t            this.addMethod('extension', function (value, element, extensions) {\n\t                return [].concat(_toConsumableArray(element.files)).reduce(function (r, file) {\n\t                    return extensions.indexOf(file.name.split('.').pop()) !== -1 && r;\n\t                }, true);\n\t            }, (0, _jediValidateI18n.translate)('This extension is not supported'));\n\t\n\t            this.addMethod('tel', function (value) {\n\t                return (/^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value)\n\t                );\n\t            }, (0, _jediValidateI18n.translate)('This phone number is incorrect'));\n\t\n\t            this.addMethod('url', function (value) {\n\t                return (/[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value)\n\t                );\n\t            }, // eslint-disable-line max-len\n\t            (0, _jediValidateI18n.translate)('Wrong url'));\n\t        }\n\t    }], [{\n\t        key: 'getFormOptions',\n\t        value: function getFormOptions(form) {\n\t            var options = { ajax: {} };\n\t\n\t            if (form.getAttribute('method')) {\n\t                options.ajax.method = form.getAttribute('method');\n\t            }\n\t\n\t            if (form.getAttribute('action')) {\n\t                options.ajax.url = form.getAttribute('action');\n\t            }\n\t\n\t            if (form.getAttribute('enctype')) {\n\t                options.ajax.enctype = form.getAttribute('enctype');\n\t            }\n\t\n\t            if (options.ajax.enctype === 'multipart/form-data') {\n\t                options.ajax.sendType = 'formData';\n\t            }\n\t\n\t            return options;\n\t        }\n\t    }, {\n\t        key: 'getRadioGroupValue',\n\t        value: function getRadioGroupValue(elements) {\n\t            for (var index in elements) {\n\t                var element = elements[index];\n\t\n\t                var value = JediValidate.getInputValue(element);\n\t\n\t                if (value !== '') {\n\t                    return value;\n\t                }\n\t            }\n\t\n\t            return '';\n\t        }\n\t    }, {\n\t        key: 'parseInputName',\n\t        value: function parseInputName(name, value) {\n\t            var re = /(\\[(\\w*)\\]|\\w*)/gi;\n\t            var matches = void 0;\n\t            var path = [];\n\t\n\t            matches = re.exec(name);\n\t            while (matches !== null) {\n\t                if (matches.index === re.lastIndex) {\n\t                    re.lastIndex += 1;\n\t                }\n\t\n\t                if (matches[2]) {\n\t                    path.push(matches[2]);\n\t                } else {\n\t                    path.push(matches[1]);\n\t                }\n\t\n\t                matches = re.exec(name);\n\t            }\n\t\n\t            return JediValidate.createObject(path, value);\n\t        }\n\t    }, {\n\t        key: 'createObject',\n\t        value: function createObject(path, value) {\n\t            var segment = path[0];\n\t\n\t            if (segment.length === 0) {\n\t                return value;\n\t            } else if (segment === '[]') {\n\t                return [JediValidate.createObject(path.slice(1), value)];\n\t            }\n\t\n\t            // Else\n\t            var object = {};\n\t            object[segment] = JediValidate.createObject(path.slice(1), value);\n\t            return object;\n\t        }\n\t    }, {\n\t        key: 'getInputValue',\n\t        value: function getInputValue(element) {\n\t            if (Array.isArray(element)) {\n\t                return JediValidate.getRadioGroupValue(element);\n\t            }\n\t\n\t            var value = '';\n\t            var type = element.type;\n\t\n\t\n\t            if (type === 'select-one') {\n\t                if (element.options.length) {\n\t                    value = element.options[element.selectedIndex].value;\n\t                }\n\t\n\t                return value;\n\t            }\n\t\n\t            if (type === 'select-multiple') {\n\t                var valueArray = [];\n\t\n\t                for (var i = 0; i < element.options.length; i += 1) {\n\t                    if (element.options[i].selected) {\n\t                        valueArray.push(element.options[i].value);\n\t                    }\n\t                }\n\t\n\t                if (valueArray.length === 0) {\n\t                    return '';\n\t                }\n\t\n\t                return valueArray;\n\t            }\n\t\n\t            if (type === 'checkbox' || type === 'radio') {\n\t                return element.checked ? element.value : '';\n\t            }\n\t\n\t            return element.value;\n\t        }\n\t    }, {\n\t        key: 'addToDictionary',\n\t        value: function addToDictionary(sourceText, translatedText, language) {\n\t            (0, _jediValidateI18n.addTranslation)(sourceText, translatedText, language);\n\t        }\n\t    }]);\n\t\n\t    return JediValidate;\n\t}();\n\t\n\tmodule.exports = JediValidate;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports === 'object') {\n\t        module.exports = factory();\n\t    } else {\n\t        root.deepmerge = factory();\n\t    }\n\t}(this, function () {\n\t\n\tfunction isMergeableObject(val) {\n\t    var nonNullObject = val && typeof val === 'object'\n\t\n\t    return nonNullObject\n\t        && Object.prototype.toString.call(val) !== '[object RegExp]'\n\t        && Object.prototype.toString.call(val) !== '[object Date]'\n\t}\n\t\n\tfunction emptyTarget(val) {\n\t    return Array.isArray(val) ? [] : {}\n\t}\n\t\n\tfunction cloneIfNecessary(value, optionsArgument) {\n\t    var clone = optionsArgument && optionsArgument.clone === true\n\t    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value\n\t}\n\t\n\tfunction defaultArrayMerge(target, source, optionsArgument) {\n\t    var destination = target.slice()\n\t    source.forEach(function(e, i) {\n\t        if (typeof destination[i] === 'undefined') {\n\t            destination[i] = cloneIfNecessary(e, optionsArgument)\n\t        } else if (isMergeableObject(e)) {\n\t            destination[i] = deepmerge(target[i], e, optionsArgument)\n\t        } else if (target.indexOf(e) === -1) {\n\t            destination.push(cloneIfNecessary(e, optionsArgument))\n\t        }\n\t    })\n\t    return destination\n\t}\n\t\n\tfunction mergeObject(target, source, optionsArgument) {\n\t    var destination = {}\n\t    if (isMergeableObject(target)) {\n\t        Object.keys(target).forEach(function (key) {\n\t            destination[key] = cloneIfNecessary(target[key], optionsArgument)\n\t        })\n\t    }\n\t    Object.keys(source).forEach(function (key) {\n\t        if (!isMergeableObject(source[key]) || !target[key]) {\n\t            destination[key] = cloneIfNecessary(source[key], optionsArgument)\n\t        } else {\n\t            destination[key] = deepmerge(target[key], source[key], optionsArgument)\n\t        }\n\t    })\n\t    return destination\n\t}\n\t\n\tfunction deepmerge(target, source, optionsArgument) {\n\t    var array = Array.isArray(source);\n\t    var options = optionsArgument || { arrayMerge: defaultArrayMerge }\n\t    var arrayMerge = options.arrayMerge || defaultArrayMerge\n\t\n\t    if (array) {\n\t        return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)\n\t    } else {\n\t        return mergeObject(target, source, optionsArgument)\n\t    }\n\t}\n\t\n\treturn deepmerge\n\t\n\t}));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.setLanguage = setLanguage;\n\texports.translate = translate;\n\texports.addTranslation = addTranslation;\n\tvar dictionary = __webpack_require__(3);\n\t\n\tvar currentLang = 'en';\n\t\n\tfunction setLanguage(id) {\n\t    currentLang = id;\n\t}\n\t\n\tfunction translate(text) {\n\t    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentLang;\n\t\n\t    return dictionary[lang] && dictionary[lang][text] || text;\n\t}\n\t\n\tfunction addTranslation(sourceText, translatedText) {\n\t    var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : currentLang;\n\t\n\t    if (dictionary[lang] === undefined) {\n\t        dictionary[lang] = {};\n\t    }\n\t    dictionary[lang][sourceText] = translatedText;\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"ru\": {\n\t\t\t\"This field is required\": \"Это поле необходимо заполнить\",\n\t\t\t\"Please, provide correct value\": \"Пожалуйста, введите корректное значение\",\n\t\t\t\"This email is incorrect\": \"Пожалуйста, введите корректный адрес электронной почты\",\n\t\t\t\"This file is too large\": \"Попробуйте загрузить файл поменьше\",\n\t\t\t\"This extension is not supported\": \"Пожалуйста, выберите файл с правильным расширением\",\n\t\t\t\"This phone number is incorrect\": \"Не корректный номер телефона\",\n\t\t\t\"Wrong url\": \"Не корректный url\"\n\t\t}\n\t};\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** jedi-validate.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 5198423f1913fb13c0f3\n **/","import deepmerge from 'deepmerge';\nimport { translate, addTranslation, setLanguage } from './i18n/jedi-validate-i18n.es6';\n\nclass JediValidate {\n    constructor(root, options = {}) {\n        const defaultOptions = {\n            ajax: {\n                url: null,\n                enctype: 'application/x-www-form-urlencoded',\n                sendType: 'serialize', // 'formData', 'json'\n                method: 'GET',\n            },\n            rules: {},\n            messages: {},\n            containers: {\n                parent: 'form-group',\n                message: 'help-block',\n                baseMessage: 'base-error',\n            },\n            states: {\n                error: 'error',\n                valid: 'valid',\n                pristine: 'pristine',\n                dirty: 'dirty',\n            },\n            formStatePrefix: 'jedi-',\n            callbacks: {\n                success() {\n                },\n                error() {\n                },\n            },\n            clean: true,\n            redirect: true,\n            language: 'en',\n        };\n\n        this.root = root;\n\n        this.options = deepmerge(defaultOptions, options);\n\n        this.fields = {};\n        this.inputs = {};\n        this.messages = {};\n        this.rules = {};\n\n        this.cacheNodes();\n\n        const formOptions = JediValidate.getFormOptions(this.nodes.form);\n\n        this.options = deepmerge(this.options, defaultOptions);\n        this.options = deepmerge(this.options, formOptions);\n        this.options = deepmerge(this.options, options);\n\n        setLanguage(options.language);\n\n        for (const language in options.translations) {\n            for (const translation in options.translations[language]) {\n                addTranslation(translation, options.translations[language][translation], language);\n            }\n        }\n\n        this.initMethods();\n        this.ready();\n    }\n\n    static getFormOptions(form) {\n        const options = { ajax: {} };\n\n        if (form.getAttribute('method')) {\n            options.ajax.method = form.getAttribute('method');\n        }\n\n        if (form.getAttribute('action')) {\n            options.ajax.url = form.getAttribute('action');\n        }\n\n        if (form.getAttribute('enctype')) {\n            options.ajax.enctype = form.getAttribute('enctype');\n        }\n\n        if (options.ajax.enctype === 'multipart/form-data') {\n            options.ajax.sendType = 'formData';\n        }\n\n        return options;\n    }\n\n    static getRadioGroupValue(elements) {\n        for (const index in elements) {\n            const element = elements[index];\n\n            const value = JediValidate.getInputValue(element);\n\n            if (value !== '') {\n                return value;\n            }\n        }\n\n        return '';\n    }\n\n    static parseInputName(name, value) {\n        const re = /(\\[(\\w*)\\]|\\w*)/gi;\n        let matches;\n        const path = [];\n\n        matches = re.exec(name);\n        while (matches !== null) {\n            if (matches.index === re.lastIndex) {\n                re.lastIndex += 1;\n            }\n\n            if (matches[2]) {\n                path.push(matches[2]);\n            } else {\n                path.push(matches[1]);\n            }\n\n            matches = re.exec(name);\n        }\n\n        return JediValidate.createObject(path, value);\n    }\n\n    static createObject(path, value) {\n        const segment = path[0];\n\n        if (segment.length === 0) {\n            return value;\n        } else if (segment === '[]') {\n            return [JediValidate.createObject(path.slice(1), value)];\n        }\n\n        // Else\n        const object = {};\n        object[segment] = JediValidate.createObject(path.slice(1), value);\n        return object;\n    }\n\n    static getInputValue(element) {\n        if (Array.isArray(element)) {\n            return JediValidate.getRadioGroupValue(element);\n        }\n\n        let value = '';\n        const { type } = element;\n\n        if (type === 'select-one') {\n            if (element.options.length) {\n                value = element.options[element.selectedIndex].value;\n            }\n\n            return value;\n        }\n\n        if (type === 'select-multiple') {\n            const valueArray = [];\n\n            for (let i = 0; i < element.options.length; i += 1) {\n                if (element.options[i].selected) {\n                    valueArray.push(element.options[i].value);\n                }\n            }\n\n            if (valueArray.length === 0) {\n                return '';\n            }\n\n            return valueArray;\n        }\n\n        if (type === 'checkbox' || type === 'radio') {\n            return element.checked ? element.value : '';\n        }\n\n        return element.value;\n    }\n\n    static addToDictionary(sourceText, translatedText, language) {\n        addTranslation(sourceText, translatedText, language);\n    }\n\n    cacheNodes() {\n        this.nodes = {\n            form: this.root.querySelector('form'),\n            inputs: this.root.querySelectorAll('[name]'),\n            baseMessage: this.root.querySelector(`.${this.options.containers.baseMessage}`),\n        };\n    }\n\n    ready() {\n        this.nodes.form.setAttribute('novalidate', 'novalidate');\n\n        this.nodes.form.addEventListener('submit', (event) => {\n            const errors = this.checkForm();\n\n            if (Object.keys(errors).length !== 0) {\n                this.options.callbacks.error(errors);\n\n                event.preventDefault();\n                return;\n            }\n\n            if (this.options.ajax && this.options.ajax.url) {\n                event.preventDefault();\n            } else {\n                this.options.callbacks.success(errors, event);\n\n                return;\n            }\n\n            const data = this.getData();\n\n            this.send(deepmerge(this.options.ajax, { data }));\n        });\n\n        this.nodes.inputs.forEach((input) => {\n            const name = input.name;\n\n            if (this.inputs[name]) {\n                if (Array.isArray(this.inputs[name])) {\n                    this.inputs[name].push(input);\n                } else {\n                    this.inputs[name] = [this.inputs[name], input];\n                }\n            } else {\n                this.inputs[name] = input;\n\n                let field = input.parentNode;\n\n                do {\n                    if (field.classList.contains(this.options.containers.parent)) {\n                        this.fields[name] = field;\n                        break;\n                    }\n                } while (field = field.parentNode);\n\n                if (!this.fields[name]) {\n                    throw new Error('Have no parent field');\n                }\n\n                this.fields[name].classList.add(this.options.states.pristine);\n\n                const messageElement = this.fields[name].querySelector(`.${this.options.containers.message}`);\n\n                if (messageElement) {\n                    this.messages[name] = messageElement;\n                } else {\n                    this.messages[name] = document.createElement('div');\n                    this.messages[name].classList.add(this.options.containers.message);\n                    this.fields[name].appendChild(this.messages[name]);\n                }\n\n                this.defineRules(name);\n            }\n\n            input.addEventListener('change', () => {\n                this.fields[name].classList.remove(this.options.states.dirty);\n                this.checkInput(name);\n            });\n\n            input.addEventListener('input', () => {\n                this.fields[name].classList.remove(this.options.states.pristine);\n                this.fields[name].classList.add(this.options.states.dirty);\n            });\n        });\n    }\n\n    send(options) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open(options.method, options.url + (options.method.toUpperCase() === 'GET' ? (`?${options.data}`) : ''), true); // todo concat url and params\n\n        if (options.sendType === 'serialize') {\n            xhr.setRequestHeader('Content-type', options.enctype);\n        } else if (options.sendType === 'json') {\n            xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n        }\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    let response = {};\n\n                    try {\n                        response = JSON.parse(xhr.responseText);\n                    } catch (e) {\n                        response.validationErrors = { base: ['JSON parsing error'] };  // todo: language extension\n                    }\n\n                    if (response.validationErrors) {\n                        this.options.callbacks.error(response.validationErrors);\n\n                        if (response.validationErrors.base) {\n                            this.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n                            this.root.classList.add(this.options.formStatePrefix + this.options.states.error); // eslint-disable-line max-len\n                            this.root.classList.remove(this.options.formStatePrefix + this.options.states.valid); // eslint-disable-line max-len\n                            delete response.validationErrors.base;\n                        } else {\n                            this.nodes.baseMessage.innerHTML = '';\n                        }\n\n                        for (const name in response.validationErrors) {\n                            this.markError(name, response.validationErrors[name]);\n                        }\n                    } else {\n                        this.options.callbacks.success(response);\n\n                        if (this.options.redirect && response.redirect) {\n                            window.location.href = response.redirect;\n                            return;\n                        }\n\n                        if (this.options.clean) {\n                            this.nodes.form.reset();\n                        }\n                    }\n                } else {\n                    console.warn(`${options.method} ${options.url} ${xhr.status} (${xhr.statusText})`);\n\n                    this.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n                    this.root.classList.add(this.options.formStatePrefix + this.options.states.error); // eslint-disable-line max-len\n                    this.root.classList.remove(this.options.formStatePrefix + this.options.states.valid); // eslint-disable-line max-len\n                }\n            }\n        };\n\n        xhr.send(options.method.toUpperCase() === 'POST' ? options.data : '');\n    }\n\n    getData() {\n        let data = '';\n\n        if (this.options.sendType === 'serialize') {\n            for (const name in this.inputs) {\n                data += `${name}=${encodeURIComponent(JediValidate.getInputValue(this.inputs[name]))}&`;\n            }\n\n            data = data.slice(0, -1);\n        } else if (this.options.sendType === 'formData') {\n            data = new FormData();\n\n            for (const name in this.inputs) {\n                if (this.inputs[name].type && this.inputs[name].type === 'file') {\n                    if (this.inputs[name].hasAttribute('multiple')) {\n                        for (let i = 0; i < this.inputs[name].files.length; i += 1) {\n                            data.append(`${name}[]`, this.inputs[name].files[i]);\n                        }\n                    } else {\n                        data.append(name, this.inputs[name].files[0]);\n                    }\n                } else {\n                    data.append(name, JediValidate.getInputValue(this.inputs[name]));\n                }\n            }\n        } else if (this.options.sendType === 'json') {\n            data = {};\n\n            for (const index in this.nodes.inputs) {\n                const input = this.nodes.inputs[index];\n\n                data = deepmerge(data, JediValidate.parseInputName(input.name, JediValidate.getInputValue(input))); // eslint-disable-line max-len\n            }\n\n            data = JSON.stringify(data);\n        }\n\n        return data;\n    }\n\n    defineRules(name) {\n        const input = this.inputs[name];\n\n        this.rules[name] = {};\n\n        const rules = ['required', 'email', 'tel', 'url'];\n\n        for (const ruleName in rules) {\n            const rule = rules[ruleName];\n\n            if (input.hasAttribute(rule) || input.type === rule || input.classList.contains(rule)) {\n                this.rules[name][rule] = true;\n            }\n        }\n\n        if (input.hasAttribute('pattern')) {\n            this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n        }\n\n        if (this.options.rules[name]) {\n            this.rules[name] = deepmerge(this.rules[name], this.options.rules[name]);\n        }\n\n        for (const rule in this.rules[name]) {\n            if (this.rules[name][rule]) {\n                this.fields[name].classList.add(rule);\n            }\n        }\n    }\n\n    checkForm() {\n        const errors = {};\n\n        for (const name in this.rules) {\n            const inputErrors = this.checkInput(name);\n\n            if (inputErrors.length) {\n                errors[name] = inputErrors;\n            }\n        }\n\n        return errors;\n    }\n\n    checkInput(name) {\n        const rules = this.rules[name];\n        const errors = [];\n        const isEmpty = !this.methods.required.func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name]); // eslint-disable-line max-len\n\n        if (isEmpty && rules.required) {\n            errors.push(this.getErrorMessage(name, 'required'));\n        } else if (!isEmpty) {\n            for (const method in rules) {\n                const params = rules[method];\n\n                if (params) {\n                    if (this.methods[method]) {\n                        const valid = this.methods[method].func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name], params); // eslint-disable-line max-len\n\n                        if (!valid) {\n                            errors.push(this.getErrorMessage(name, method));\n                        }\n                    } else {\n                        errors.push(`Method \"${method}\" not found`);\n                    }\n                }\n            }\n        }\n\n        if (errors.length) {\n            this.markError(name, errors);\n        } else {\n            this.markValid(name);\n        }\n\n        return errors;\n    }\n\n    markError(name, errors) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.error);\n        this.fields[name].classList.remove(this.options.states.valid);\n\n        this.messages[name].innerHTML = errors.join(', ');\n    }\n\n    markValid(name) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.valid);\n        this.fields[name].classList.remove(this.options.states.error);\n\n        this.messages[name].innerHTML = '';\n    }\n\n    getErrorMessage(name, method) {\n        let message = '';\n\n        if (this.options.messages[name] && this.options.messages[name][method]) {\n            message = this.options.messages[name][method];\n        } else {\n            message = this.methods[method].message;\n        }\n\n        return message;\n    }\n\n    addMethod(rule, func, message) {\n        this.methods[rule] = {\n            func,\n            message,\n        };\n    }\n\n    initMethods() {\n        this.methods = {};\n\n        this.addMethod('required', value =>\n            value && value.trim() !== '',\n            translate('This field is required')\n        );\n\n        this.addMethod('regexp', (value, element, regexp) =>\n            regexp.test(value),\n                translate('Please, provide correct value')\n        );\n\n        this.addMethod('email', value =>\n            /[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value),\n            translate('This email is incorrect')\n        );\n\n        this.addMethod('filesize', (value, element, size) =>\n            [...element.files].reduce((r, file) => file.size < size && r, true),\n            translate('This file is too large')\n        );\n\n        this.addMethod('extension', (value, element, extensions) =>\n            [...element.files].reduce((r, file) => extensions.indexOf(file.name.split('.').pop()) !== -1 && r, true),\n            translate('This extension is not supported')\n        );\n\n        this.addMethod('tel', value =>\n            /^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value),\n            translate('This phone number is incorrect')\n        );\n\n        this.addMethod('url', value =>\n            /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value), // eslint-disable-line max-len\n            translate('Wrong url')\n        );\n    }\n}\n\nmodule.exports = JediValidate;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/jedi-validate.es6\n **/","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.deepmerge = factory();\n    }\n}(this, function () {\n\nfunction isMergeableObject(val) {\n    var nonNullObject = val && typeof val === 'object'\n\n    return nonNullObject\n        && Object.prototype.toString.call(val) !== '[object RegExp]'\n        && Object.prototype.toString.call(val) !== '[object Date]'\n}\n\nfunction emptyTarget(val) {\n    return Array.isArray(val) ? [] : {}\n}\n\nfunction cloneIfNecessary(value, optionsArgument) {\n    var clone = optionsArgument && optionsArgument.clone === true\n    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value\n}\n\nfunction defaultArrayMerge(target, source, optionsArgument) {\n    var destination = target.slice()\n    source.forEach(function(e, i) {\n        if (typeof destination[i] === 'undefined') {\n            destination[i] = cloneIfNecessary(e, optionsArgument)\n        } else if (isMergeableObject(e)) {\n            destination[i] = deepmerge(target[i], e, optionsArgument)\n        } else if (target.indexOf(e) === -1) {\n            destination.push(cloneIfNecessary(e, optionsArgument))\n        }\n    })\n    return destination\n}\n\nfunction mergeObject(target, source, optionsArgument) {\n    var destination = {}\n    if (isMergeableObject(target)) {\n        Object.keys(target).forEach(function (key) {\n            destination[key] = cloneIfNecessary(target[key], optionsArgument)\n        })\n    }\n    Object.keys(source).forEach(function (key) {\n        if (!isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneIfNecessary(source[key], optionsArgument)\n        } else {\n            destination[key] = deepmerge(target[key], source[key], optionsArgument)\n        }\n    })\n    return destination\n}\n\nfunction deepmerge(target, source, optionsArgument) {\n    var array = Array.isArray(source);\n    var options = optionsArgument || { arrayMerge: defaultArrayMerge }\n    var arrayMerge = options.arrayMerge || defaultArrayMerge\n\n    if (array) {\n        return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)\n    } else {\n        return mergeObject(target, source, optionsArgument)\n    }\n}\n\nreturn deepmerge\n\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deepmerge/index.js\n ** module id = 1\n ** module chunks = 0 1\n **/","const dictionary = require('./jedi-validate-i18n-data.json');\n\nlet currentLang = 'en';\n\nexport function setLanguage(id) {\n    currentLang = id;\n}\n\nexport function translate(text, lang = currentLang) {\n    return (dictionary[lang] && dictionary[lang][text]) || text;\n}\n\nexport function addTranslation(sourceText, translatedText, lang = currentLang) {\n    if (dictionary[lang] === undefined) {\n        dictionary[lang] = {};\n    }\n    dictionary[lang][sourceText] = translatedText;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/i18n/jedi-validate-i18n.es6\n **/","module.exports = {\n\t\"ru\": {\n\t\t\"This field is required\": \"Это поле необходимо заполнить\",\n\t\t\"Please, provide correct value\": \"Пожалуйста, введите корректное значение\",\n\t\t\"This email is incorrect\": \"Пожалуйста, введите корректный адрес электронной почты\",\n\t\t\"This file is too large\": \"Попробуйте загрузить файл поменьше\",\n\t\t\"This extension is not supported\": \"Пожалуйста, выберите файл с правильным расширением\",\n\t\t\"This phone number is incorrect\": \"Не корректный номер телефона\",\n\t\t\"Wrong url\": \"Не корректный url\"\n\t}\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/i18n/jedi-validate-i18n-data.json\n ** module id = 3\n ** module chunks = 0 1\n **/"],"sourceRoot":""}