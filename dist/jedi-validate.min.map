{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///jedi-validate.min.js","webpack:///webpack/bootstrap f7c042d714119452bf6d?7867","webpack:///./src/jedi-validate.es6?dec3","webpack:///./~/deepmerge/index.js?4ee7","webpack:///./src/i18n/jedi-validate-i18n.es6?63a0","webpack:///./src/i18n/jedi-validate-i18n-data.json?59ee"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_deepmerge","_deepmerge2","_jediValidateI18n","JediValidate","options","arguments","undefined","defaultOptions","ajax","url","enctype","sendType","method","rules","messages","containers","parent","message","baseMessage","states","error","valid","pristine","dirty","formStatePrefix","callbacks","success","clean","redirect","language","fields","inputs","cacheNodes","formOptions","getFormOptions","nodes","form","translations","translation","addTranslation","initMethods","ready","value","querySelector","querySelectorAll","_this","setAttribute","addEventListener","event","errors","checkForm","keys","preventDefault","data","getData","send","forEach","input","name","Array","isArray","push","field","parentNode","classList","contains","Error","add","messageElement","document","createElement","appendChild","defineRules","remove","checkInput","_this2","xhr","XMLHttpRequest","open","toUpperCase","setRequestHeader","onreadystatechange","readyState","status","response","JSON","parse","responseText","e","validationErrors","base","innerHTML","join","markError","window","location","href","reset","console","warn","statusText","encodeURIComponent","getInputValue","slice","FormData","type","hasAttribute","files","append","index","parseInputName","stringify","ruleName","rule","regexp","RegExp","getAttribute","inputErrors","isEmpty","methods","required","func","getErrorMessage","params","markValid","addMethod","trim","translate","element","test","size","reduce","r","file","extensions","indexOf","split","pop","elements","re","matches","path","exec","lastIndex","createObject","segment","object","getRadioGroupValue","selectedIndex","selected","checked","sourceText","translatedText","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","isMergeableObject","val","nonNullObject","toString","emptyTarget","cloneIfNecessary","optionsArgument","clone","deepmerge","defaultArrayMerge","source","destination","mergeObject","array","arrayMerge","setLanguage","currentLang","text","lang","dictionary","ru","This field is required","Please, provide correct value","This email is incorrect","This file is too large","This extension is not supported","This phone number is incorrect","Wrong url"],"mappings":"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","file":"jedi-validate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JediValidate\"] = factory();\n\telse\n\t\troot[\"JediValidate\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JediValidate\"] = factory();\n\telse\n\t\troot[\"JediValidate\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _deepmerge = __webpack_require__(1);\n\t\n\tvar _deepmerge2 = _interopRequireDefault(_deepmerge);\n\t\n\tvar _jediValidateI18n = __webpack_require__(2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar JediValidate = function () {\n\t    function JediValidate(root) {\n\t        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t        _classCallCheck(this, JediValidate);\n\t\n\t        var defaultOptions = {\n\t            ajax: {\n\t                url: null,\n\t                enctype: 'application/x-www-form-urlencoded',\n\t                sendType: 'serialize', // 'formData', 'json'\n\t                method: 'GET'\n\t            },\n\t            rules: {},\n\t            messages: {},\n\t            containers: {\n\t                parent: 'form-group',\n\t                message: 'help-block',\n\t                baseMessage: 'base-error'\n\t            },\n\t            states: {\n\t                error: 'error',\n\t                valid: 'valid',\n\t                pristine: 'pristine',\n\t                dirty: 'dirty'\n\t            },\n\t            formStatePrefix: 'jedi-',\n\t            callbacks: {\n\t                success: function success() {},\n\t                error: function error() {}\n\t            },\n\t            clean: true,\n\t            redirect: true,\n\t            language: 'en'\n\t        };\n\t\n\t        this.root = root;\n\t\n\t        this.options = (0, _deepmerge2.default)(defaultOptions, options);\n\t\n\t        this.fields = {};\n\t        this.inputs = {};\n\t        this.messages = {};\n\t        this.rules = {};\n\t\n\t        this.cacheNodes();\n\t\n\t        var formOptions = JediValidate.getFormOptions(this.nodes.form);\n\t\n\t        this.options = (0, _deepmerge2.default)(this.options, defaultOptions);\n\t        this.options = (0, _deepmerge2.default)(this.options, formOptions);\n\t        this.options = (0, _deepmerge2.default)(this.options, options);\n\t\n\t        for (var language in options.translations) {\n\t            for (var translation in options.translations[language]) {\n\t                (0, _jediValidateI18n.addTranslation)(translation, options.translations[language][translation], language);\n\t            }\n\t        }\n\t\n\t        this.initMethods();\n\t        this.ready();\n\t    }\n\t\n\t    _createClass(JediValidate, [{\n\t        key: 'cacheNodes',\n\t        value: function cacheNodes() {\n\t            this.nodes = {\n\t                form: this.root.querySelector('form'),\n\t                inputs: this.root.querySelectorAll('[name]'),\n\t                baseMessage: this.root.querySelector('.' + this.options.containers.baseMessage)\n\t            };\n\t        }\n\t    }, {\n\t        key: 'ready',\n\t        value: function ready() {\n\t            var _this = this;\n\t\n\t            this.nodes.form.setAttribute('novalidate', 'novalidate');\n\t\n\t            this.nodes.form.addEventListener('submit', function (event) {\n\t                var errors = _this.checkForm();\n\t\n\t                if (Object.keys(errors).length !== 0) {\n\t                    _this.options.callbacks.error(errors);\n\t\n\t                    event.preventDefault();\n\t                    return;\n\t                }\n\t\n\t                if (_this.options.ajax && _this.options.ajax.url) {\n\t                    event.preventDefault();\n\t                } else {\n\t                    _this.options.callbacks.success(errors, event);\n\t\n\t                    return;\n\t                }\n\t\n\t                var data = _this.getData();\n\t\n\t                _this.send((0, _deepmerge2.default)(_this.options.ajax, { data: data }));\n\t            });\n\t\n\t            this.nodes.inputs.forEach(function (input) {\n\t                var name = input.name;\n\t\n\t                if (_this.inputs[name]) {\n\t                    if (Array.isArray(_this.inputs[name])) {\n\t                        _this.inputs[name].push(input);\n\t                    } else {\n\t                        _this.inputs[name] = [_this.inputs[name], input];\n\t                    }\n\t                } else {\n\t                    _this.inputs[name] = input;\n\t\n\t                    var field = input.parentNode;\n\t\n\t                    do {\n\t                        if (field.classList.contains(_this.options.containers.parent)) {\n\t                            _this.fields[name] = field;\n\t                            break;\n\t                        }\n\t                    } while (field === field.parentNode);\n\t\n\t                    if (!_this.fields[name]) {\n\t                        throw new Error('Have no parent field');\n\t                    }\n\t\n\t                    _this.fields[name].classList.add(_this.options.states.pristine);\n\t\n\t                    var messageElement = _this.fields[name].querySelector('.' + _this.options.containers.message);\n\t\n\t                    if (messageElement) {\n\t                        _this.messages[name] = messageElement;\n\t                    } else {\n\t                        _this.messages[name] = document.createElement('div');\n\t                        _this.messages[name].classList.add(_this.options.containers.message);\n\t                        _this.fields[name].appendChild(_this.messages[name]);\n\t                    }\n\t\n\t                    _this.defineRules(name);\n\t                }\n\t\n\t                input.addEventListener('change', function () {\n\t                    _this.fields[name].classList.remove(_this.options.states.dirty);\n\t                    _this.checkInput(name);\n\t                });\n\t\n\t                input.addEventListener('input', function () {\n\t                    _this.fields[name].classList.remove(_this.options.states.pristine);\n\t                    _this.fields[name].classList.add(_this.options.states.dirty);\n\t                });\n\t            });\n\t        }\n\t    }, {\n\t        key: 'send',\n\t        value: function send(options) {\n\t            var _this2 = this;\n\t\n\t            var xhr = new XMLHttpRequest();\n\t\n\t            xhr.open(options.method, options.url + (options.method.toUpperCase() === 'GET' ? '?' + options.data : ''), true); // todo concat url and params\n\t\n\t            if (options.sendType === 'serialize') {\n\t                xhr.setRequestHeader('Content-type', options.enctype);\n\t            } else if (options.sendType === 'json') {\n\t                xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n\t            }\n\t\n\t            xhr.onreadystatechange = function () {\n\t                if (xhr.readyState === 4) {\n\t                    if (xhr.status === 200) {\n\t                        var response = {};\n\t\n\t                        try {\n\t                            response = JSON.parse(xhr.responseText);\n\t                        } catch (e) {\n\t                            response.validationErrors = { base: ['JSON parsing error'] }; // todo: language extension\n\t                        }\n\t\n\t                        if (response.validationErrors) {\n\t                            _this2.options.callbacks.error(response.validationErrors);\n\t\n\t                            if (response.validationErrors.base) {\n\t                                _this2.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n\t                                _this2.root.classList.add(_this2.options.formStatePrefix + _this2.options.states.error); // eslint-disable-line max-len\n\t                                _this2.root.classList.remove(_this2.options.formStatePrefix + _this2.options.states.valid); // eslint-disable-line max-len\n\t                                delete response.validationErrors.base;\n\t                            } else {\n\t                                _this2.nodes.baseMessage.innerHTML = '';\n\t                            }\n\t\n\t                            for (var name in response.validationErrors) {\n\t                                _this2.markError(name, response.validationErrors[name]);\n\t                            }\n\t                        } else {\n\t                            _this2.options.callbacks.success(response);\n\t\n\t                            if (_this2.options.redirect && response.redirect) {\n\t                                window.location.href = response.redirect;\n\t                                return;\n\t                            }\n\t\n\t                            if (_this2.options.clean) {\n\t                                _this2.nodes.form.reset();\n\t                            }\n\t                        }\n\t                    } else {\n\t                        console.warn(options.method + ' ' + options.url + ' ' + xhr.status + ' (' + xhr.statusText + ')');\n\t\n\t                        _this2.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n\t                        _this2.root.classList.add(_this2.options.formStatePrefix + _this2.options.states.error); // eslint-disable-line max-len\n\t                        _this2.root.classList.remove(_this2.options.formStatePrefix + _this2.options.states.valid); // eslint-disable-line max-len\n\t                    }\n\t                }\n\t            };\n\t\n\t            xhr.send(options.method.toUpperCase() === 'POST' ? options.data : '');\n\t        }\n\t    }, {\n\t        key: 'getData',\n\t        value: function getData() {\n\t            var data = '';\n\t\n\t            if (this.options.sendType === 'serialize') {\n\t                for (var name in this.inputs) {\n\t                    data += name + '=' + encodeURIComponent(JediValidate.getInputValue(this.inputs[name])) + '&';\n\t                }\n\t\n\t                data = data.slice(0, -1);\n\t            } else if (this.options.sendType === 'formData') {\n\t                data = new FormData();\n\t\n\t                for (var _name in this.inputs) {\n\t                    if (this.inputs[_name].type && this.inputs[_name].type === 'file') {\n\t                        if (this.inputs[_name].hasAttribute('multiple')) {\n\t                            for (var i = 0; i < this.inputs[_name].files.length; i++) {\n\t                                data.append(_name + '[]', this.inputs[_name].files[i]);\n\t                            }\n\t                        } else {\n\t                            data.append(_name, this.inputs[_name].files[0]);\n\t                        }\n\t                    } else {\n\t                        data.append(_name, JediValidate.getInputValue(this.inputs[_name]));\n\t                    }\n\t                }\n\t            } else if (this.options.sendType === 'json') {\n\t                data = {};\n\t\n\t                for (var index in this.nodes.inputs) {\n\t                    var input = this.nodes.inputs[index];\n\t\n\t                    data = (0, _deepmerge2.default)(data, JediValidate.parseInputName(input.name, JediValidate.getInputValue(input))); // eslint-disable-line max-len\n\t                }\n\t\n\t                data = JSON.stringify(data);\n\t            }\n\t\n\t            return data;\n\t        }\n\t    }, {\n\t        key: 'defineRules',\n\t        value: function defineRules(name) {\n\t            var input = this.inputs[name];\n\t\n\t            this.rules[name] = {};\n\t\n\t            var rules = ['required', 'email', 'tel', 'url'];\n\t\n\t            for (var ruleName in rules) {\n\t                var rule = rules[ruleName];\n\t\n\t                if (input.hasAttribute(rule) || input.type === rule || input.classList.contains(rule)) {\n\t                    this.rules[name][rule] = true;\n\t                }\n\t            }\n\t\n\t            if (input.hasAttribute('pattern')) {\n\t                this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n\t            }\n\t\n\t            if (this.options.rules[name]) {\n\t                this.rules[name] = (0, _deepmerge2.default)(this.rules[name], this.options.rules[name]);\n\t            }\n\t\n\t            for (var _rule in this.rules[name]) {\n\t                if (this.rules[name][_rule]) {\n\t                    this.fields[name].classList.add(_rule);\n\t                }\n\t            }\n\t        }\n\t    }, {\n\t        key: 'checkForm',\n\t        value: function checkForm() {\n\t            var errors = {};\n\t\n\t            for (var name in this.rules) {\n\t                var inputErrors = this.checkInput(name);\n\t\n\t                if (inputErrors.length) {\n\t                    errors[name] = inputErrors;\n\t                }\n\t            }\n\t\n\t            return errors;\n\t        }\n\t    }, {\n\t        key: 'checkInput',\n\t        value: function checkInput(name) {\n\t            var rules = this.rules[name];\n\t            var errors = [];\n\t            var isEmpty = !this.methods.required.func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name]); // eslint-disable-line max-len\n\t\n\t            if (isEmpty && rules.required) {\n\t                errors.push(this.getErrorMessage(name, 'required'));\n\t            } else if (!isEmpty) {\n\t                for (var method in rules) {\n\t                    var params = rules[method];\n\t\n\t                    if (params) {\n\t                        if (this.methods[method]) {\n\t                            var valid = this.methods[method].func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name], params); // eslint-disable-line max-len\n\t\n\t                            if (!valid) {\n\t                                errors.push(this.getErrorMessage(name, method));\n\t                            }\n\t                        } else {\n\t                            errors.push('Method \"' + method + '\" not found');\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            if (errors.length) {\n\t                this.markError(name, errors);\n\t            } else {\n\t                this.markValid(name);\n\t            }\n\t\n\t            return errors;\n\t        }\n\t    }, {\n\t        key: 'markError',\n\t        value: function markError(name, errors) {\n\t            if (!this.fields[name] || !this.messages[name]) {\n\t                return;\n\t            }\n\t\n\t            this.fields[name].classList.add(this.options.states.error);\n\t            this.fields[name].classList.remove(this.options.states.valid);\n\t\n\t            this.messages[name].innerHTML = errors.join(', ');\n\t        }\n\t    }, {\n\t        key: 'markValid',\n\t        value: function markValid(name) {\n\t            if (!this.fields[name] || !this.messages[name]) {\n\t                return;\n\t            }\n\t\n\t            this.fields[name].classList.add(this.options.states.valid);\n\t            this.fields[name].classList.remove(this.options.states.error);\n\t\n\t            this.messages[name].innerHTML = '';\n\t        }\n\t    }, {\n\t        key: 'getErrorMessage',\n\t        value: function getErrorMessage(name, method) {\n\t            var message = '';\n\t\n\t            if (this.options.messages[name] && this.options.messages[name][method]) {\n\t                message = this.options.messages[name][method];\n\t            } else {\n\t                message = this.methods[method].message;\n\t            }\n\t\n\t            return message;\n\t        }\n\t    }, {\n\t        key: 'addMethod',\n\t        value: function addMethod(rule, func, message) {\n\t            this.methods[rule] = {\n\t                func: func,\n\t                message: message\n\t            };\n\t        }\n\t    }, {\n\t        key: 'initMethods',\n\t        value: function initMethods() {\n\t            this.methods = {};\n\t\n\t            this.addMethod('required', function (value) {\n\t                return value && value.trim() !== '';\n\t            }, (0, _jediValidateI18n.translate)('This field is required'));\n\t\n\t            this.addMethod('regexp', function (value, element, regexp) {\n\t                return regexp.test(value);\n\t            }, (0, _jediValidateI18n.translate)('Please, provide correct value'));\n\t\n\t            this.addMethod('email', function (value) {\n\t                return (/[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value)\n\t                );\n\t            }, (0, _jediValidateI18n.translate)('This email is incorrect'));\n\t\n\t            this.addMethod('filesize', function (value, element, size) {\n\t                return Array.prototype.slice.call(element.files).reduce(function (r, file) {\n\t                    return file.size < size && r;\n\t                }, true);\n\t            }, (0, _jediValidateI18n.translate)('This file is too large'));\n\t\n\t            this.addMethod('extension', function (value, element, extensions) {\n\t                return Array.prototype.slice.call(element.files).reduce(function (r, file) {\n\t                    return extensions.indexOf(file.name.split('.').pop()) !== -1 && r;\n\t                }, true, (0, _jediValidateI18n.translate)('This extension is not supported'));\n\t            });\n\t\n\t            this.addMethod('tel', function (value) {\n\t                return (/^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value)\n\t                );\n\t            }, (0, _jediValidateI18n.translate)('This phone number is incorrect'));\n\t\n\t            this.addMethod('url', function (value) {\n\t                return (/[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value)\n\t                );\n\t            } // eslint-disable-line max-len\n\t            , (0, _jediValidateI18n.translate)('Wrong url'));\n\t        }\n\t    }], [{\n\t        key: 'getFormOptions',\n\t        value: function getFormOptions(form) {\n\t            var options = { ajax: {} };\n\t\n\t            if (form.getAttribute('method')) {\n\t                options.ajax.method = form.getAttribute('method');\n\t            }\n\t\n\t            if (form.getAttribute('action')) {\n\t                options.ajax.url = form.getAttribute('action');\n\t            }\n\t\n\t            if (form.getAttribute('enctype')) {\n\t                options.ajax.enctype = form.getAttribute('enctype');\n\t            }\n\t\n\t            if (options.ajax.enctype === 'multipart/form-data') {\n\t                options.ajax.sendType = 'formData';\n\t            }\n\t\n\t            return options;\n\t        }\n\t    }, {\n\t        key: 'getRadioGroupValue',\n\t        value: function getRadioGroupValue(elements) {\n\t            for (var index in elements) {\n\t                var element = elements[index];\n\t\n\t                var value = JediValidate.getInputValue(element);\n\t\n\t                if (value !== '') {\n\t                    return value;\n\t                }\n\t            }\n\t\n\t            return '';\n\t        }\n\t    }, {\n\t        key: 'parseInputName',\n\t        value: function parseInputName(name, value) {\n\t            var re = /(\\[(\\w*)\\]|\\w*)/gi;\n\t            var matches = void 0;\n\t            var path = [];\n\t\n\t            while ((matches = re.exec(name)) !== null) {\n\t                if (matches.index === re.lastIndex) {\n\t                    re.lastIndex += 1;\n\t                }\n\t\n\t                if (matches[2]) {\n\t                    path.push(matches[2]);\n\t                } else {\n\t                    path.push(matches[1]);\n\t                }\n\t            }\n\t\n\t            return JediValidate.createObject(path, value);\n\t        }\n\t    }, {\n\t        key: 'createObject',\n\t        value: function createObject(path, value) {\n\t            var segment = path[0];\n\t\n\t            if (segment.length === 0) {\n\t                return value;\n\t            } else if (segment === '[]') {\n\t                return [JediValidate.createObject(path.slice(1), value)];\n\t            }\n\t\n\t            var object = {};\n\t\n\t            object[segment] = JediValidate.createObject(path.slice(1), value);\n\t\n\t            return object;\n\t        }\n\t    }, {\n\t        key: 'getInputValue',\n\t        value: function getInputValue(element) {\n\t            if (Array.isArray(element)) {\n\t                return JediValidate.getRadioGroupValue(element);\n\t            }\n\t\n\t            var value = '';\n\t            var type = element.type;\n\t\n\t\n\t            if (type === 'select-one') {\n\t                if (element.options.length) {\n\t                    value = element.options[element.selectedIndex].value;\n\t                }\n\t\n\t                return value;\n\t            }\n\t\n\t            if (type === 'select-multiple') {\n\t                value = [];\n\t\n\t                for (var i = 0; i < element.options.length; i++) {\n\t                    if (element.options[i].selected) {\n\t                        value.push(element.options[i].value);\n\t                    }\n\t                }\n\t\n\t                if (value.length === 0) {\n\t                    value = '';\n\t                }\n\t\n\t                return value;\n\t            }\n\t\n\t            if (type === 'checkbox' || type === 'radio') {\n\t                return element.checked ? element.value : '';\n\t            }\n\t\n\t            return element.value;\n\t        }\n\t    }, {\n\t        key: 'addToDictionary',\n\t        value: function addToDictionary(sourceText, translatedText, language) {\n\t            (0, _jediValidateI18n.addTranslation)(sourceText, translatedText, language);\n\t        }\n\t    }]);\n\t\n\t    return JediValidate;\n\t}();\n\t\n\tmodule.exports = JediValidate;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports === 'object') {\n\t        module.exports = factory();\n\t    } else {\n\t        root.deepmerge = factory();\n\t    }\n\t}(this, function () {\n\t\n\tfunction isMergeableObject(val) {\n\t    var nonNullObject = val && typeof val === 'object'\n\t\n\t    return nonNullObject\n\t        && Object.prototype.toString.call(val) !== '[object RegExp]'\n\t        && Object.prototype.toString.call(val) !== '[object Date]'\n\t}\n\t\n\tfunction emptyTarget(val) {\n\t    return Array.isArray(val) ? [] : {}\n\t}\n\t\n\tfunction cloneIfNecessary(value, optionsArgument) {\n\t    var clone = optionsArgument && optionsArgument.clone === true\n\t    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value\n\t}\n\t\n\tfunction defaultArrayMerge(target, source, optionsArgument) {\n\t    var destination = target.slice()\n\t    source.forEach(function(e, i) {\n\t        if (typeof destination[i] === 'undefined') {\n\t            destination[i] = cloneIfNecessary(e, optionsArgument)\n\t        } else if (isMergeableObject(e)) {\n\t            destination[i] = deepmerge(target[i], e, optionsArgument)\n\t        } else if (target.indexOf(e) === -1) {\n\t            destination.push(cloneIfNecessary(e, optionsArgument))\n\t        }\n\t    })\n\t    return destination\n\t}\n\t\n\tfunction mergeObject(target, source, optionsArgument) {\n\t    var destination = {}\n\t    if (isMergeableObject(target)) {\n\t        Object.keys(target).forEach(function (key) {\n\t            destination[key] = cloneIfNecessary(target[key], optionsArgument)\n\t        })\n\t    }\n\t    Object.keys(source).forEach(function (key) {\n\t        if (!isMergeableObject(source[key]) || !target[key]) {\n\t            destination[key] = cloneIfNecessary(source[key], optionsArgument)\n\t        } else {\n\t            destination[key] = deepmerge(target[key], source[key], optionsArgument)\n\t        }\n\t    })\n\t    return destination\n\t}\n\t\n\tfunction deepmerge(target, source, optionsArgument) {\n\t    var array = Array.isArray(source);\n\t    var options = optionsArgument || { arrayMerge: defaultArrayMerge }\n\t    var arrayMerge = options.arrayMerge || defaultArrayMerge\n\t\n\t    if (array) {\n\t        return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)\n\t    } else {\n\t        return mergeObject(target, source, optionsArgument)\n\t    }\n\t}\n\t\n\treturn deepmerge\n\t\n\t}));\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.setLanguage = setLanguage;\n\texports.translate = translate;\n\texports.addTranslation = addTranslation;\n\tvar dictionary = __webpack_require__(3);\n\t\n\tvar currentLang = 'en';\n\t\n\tfunction setLanguage(id) {\n\t    currentLang = id;\n\t}\n\t\n\tfunction translate(text) {\n\t    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentLang;\n\t\n\t    return dictionary[lang] && dictionary[lang][text] || text;\n\t}\n\t\n\tfunction addTranslation(sourceText, translatedText) {\n\t    var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : currentLang;\n\t\n\t    if (dictionary[lang] === undefined) {\n\t        dictionary[lang] = {};\n\t    }\n\t    dictionary[lang][sourceText] = translatedText;\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\t\"ru\": {\n\t\t\t\"This field is required\": \"Это поле необходимо заполнить\",\n\t\t\t\"Please, provide correct value\": \"Пожалуйста, введите корректное значение\",\n\t\t\t\"This email is incorrect\": \"Пожалуйста, введите корректный адрес электронной почты\",\n\t\t\t\"This file is too large\": \"Попробуйте загрузить файл поменьше\",\n\t\t\t\"This extension is not supported\": \"Пожалуйста, выберите файл с правильным расширением\",\n\t\t\t\"This phone number is incorrect\": \"Не корректный номер телефона\",\n\t\t\t\"Wrong url\": \"Не корректный url\"\n\t\t}\n\t};\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** jedi-validate.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f7c042d714119452bf6d\n **/","import deepmerge from 'deepmerge';\nimport { translate, addTranslation } from './i18n/jedi-validate-i18n.es6';\n\nclass JediValidate {\n    constructor(root, options = {}) {\n        const defaultOptions = {\n            ajax: {\n                url: null,\n                enctype: 'application/x-www-form-urlencoded',\n                sendType: 'serialize', // 'formData', 'json'\n                method: 'GET',\n            },\n            rules: {},\n            messages: {},\n            containers: {\n                parent: 'form-group',\n                message: 'help-block',\n                baseMessage: 'base-error',\n            },\n            states: {\n                error: 'error',\n                valid: 'valid',\n                pristine: 'pristine',\n                dirty: 'dirty',\n            },\n            formStatePrefix: 'jedi-',\n            callbacks: {\n                success() {\n                },\n                error() {\n                },\n            },\n            clean: true,\n            redirect: true,\n            language: 'en',\n        };\n\n        this.root = root;\n\n        this.options = deepmerge(defaultOptions, options);\n\n        this.fields = {};\n        this.inputs = {};\n        this.messages = {};\n        this.rules = {};\n\n        this.cacheNodes();\n\n        const formOptions = JediValidate.getFormOptions(this.nodes.form);\n\n        this.options = deepmerge(this.options, defaultOptions);\n        this.options = deepmerge(this.options, formOptions);\n        this.options = deepmerge(this.options, options);\n\n\n        for (const language in options.translations) {\n            for (const translation in options.translations[language]) {\n                addTranslation(translation, options.translations[language][translation], language);\n            }\n        }\n\n        this.initMethods();\n        this.ready();\n    }\n\n    static getFormOptions(form) {\n        const options = { ajax: {} };\n\n        if (form.getAttribute('method')) {\n            options.ajax.method = form.getAttribute('method');\n        }\n\n        if (form.getAttribute('action')) {\n            options.ajax.url = form.getAttribute('action');\n        }\n\n        if (form.getAttribute('enctype')) {\n            options.ajax.enctype = form.getAttribute('enctype');\n        }\n\n        if (options.ajax.enctype === 'multipart/form-data') {\n            options.ajax.sendType = 'formData';\n        }\n\n        return options;\n    }\n\n    static getRadioGroupValue(elements) {\n        for (const index in elements) {\n            const element = elements[index];\n\n            const value = JediValidate.getInputValue(element);\n\n            if (value !== '') {\n                return value;\n            }\n        }\n\n        return '';\n    }\n\n    static parseInputName(name, value) {\n        const re = /(\\[(\\w*)\\]|\\w*)/gi;\n        let matches;\n        const path = [];\n\n        while ((matches = re.exec(name)) !== null) {\n            if (matches.index === re.lastIndex) {\n                re.lastIndex += 1;\n            }\n\n            if (matches[2]) {\n                path.push(matches[2]);\n            } else {\n                path.push(matches[1]);\n            }\n        }\n\n        return JediValidate.createObject(path, value);\n    }\n\n    static createObject(path, value) {\n        const segment = path[0];\n\n        if (segment.length === 0) {\n            return value;\n        } else if (segment === '[]') {\n            return [JediValidate.createObject(path.slice(1), value)];\n        }\n\n        const object = {};\n\n        object[segment] = JediValidate.createObject(path.slice(1), value);\n\n        return object;\n    }\n\n    static getInputValue(element) {\n        if (Array.isArray(element)) {\n            return JediValidate.getRadioGroupValue(element);\n        }\n\n        let value = '';\n        const { type } = element;\n\n        if (type === 'select-one') {\n            if (element.options.length) {\n                value = element.options[element.selectedIndex].value;\n            }\n\n            return value;\n        }\n\n        if (type === 'select-multiple') {\n            value = [];\n\n            for (let i = 0; i < element.options.length; i++) {\n                if (element.options[i].selected) {\n                    value.push(element.options[i].value);\n                }\n            }\n\n            if (value.length === 0) {\n                value = '';\n            }\n\n            return value;\n        }\n\n        if (type === 'checkbox' || type === 'radio') {\n            return element.checked ? element.value : '';\n        }\n\n        return element.value;\n    }\n\n    static addToDictionary(sourceText, translatedText, language) {\n        addTranslation(sourceText, translatedText, language);\n    }\n\n    cacheNodes() {\n        this.nodes = {\n            form: this.root.querySelector('form'),\n            inputs: this.root.querySelectorAll('[name]'),\n            baseMessage: this.root.querySelector(`.${this.options.containers.baseMessage}`),\n        };\n    }\n\n    ready() {\n        this.nodes.form.setAttribute('novalidate', 'novalidate');\n\n        this.nodes.form.addEventListener('submit', (event) => {\n            const errors = this.checkForm();\n\n            if (Object.keys(errors).length !== 0) {\n                this.options.callbacks.error(errors);\n\n                event.preventDefault();\n                return;\n            }\n\n            if (this.options.ajax && this.options.ajax.url) {\n                event.preventDefault();\n            } else {\n                this.options.callbacks.success(errors, event);\n\n                return;\n            }\n\n            const data = this.getData();\n\n            this.send(deepmerge(this.options.ajax, { data }));\n        });\n\n        this.nodes.inputs.forEach((input) => {\n            const name = input.name;\n\n            if (this.inputs[name]) {\n                if (Array.isArray(this.inputs[name])) {\n                    this.inputs[name].push(input);\n                } else {\n                    this.inputs[name] = [this.inputs[name], input];\n                }\n            } else {\n                this.inputs[name] = input;\n\n                const field = input.parentNode;\n\n                do {\n                    if (field.classList.contains(this.options.containers.parent)) {\n                        this.fields[name] = field;\n                        break;\n                    }\n                } while (field === field.parentNode);\n\n                if (!this.fields[name]) {\n                    throw new Error('Have no parent field');\n                }\n\n                this.fields[name].classList.add(this.options.states.pristine);\n\n                const messageElement = this.fields[name].querySelector(`.${this.options.containers.message}`);\n\n                if (messageElement) {\n                    this.messages[name] = messageElement;\n                } else {\n                    this.messages[name] = document.createElement('div');\n                    this.messages[name].classList.add(this.options.containers.message);\n                    this.fields[name].appendChild(this.messages[name]);\n                }\n\n                this.defineRules(name);\n            }\n\n            input.addEventListener('change', () => {\n                this.fields[name].classList.remove(this.options.states.dirty);\n                this.checkInput(name);\n            });\n\n            input.addEventListener('input', () => {\n                this.fields[name].classList.remove(this.options.states.pristine);\n                this.fields[name].classList.add(this.options.states.dirty);\n            });\n        });\n    }\n\n    send(options) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open(options.method, options.url + (options.method.toUpperCase() === 'GET' ? (`?${options.data}`) : ''), true); // todo concat url and params\n\n        if (options.sendType === 'serialize') {\n            xhr.setRequestHeader('Content-type', options.enctype);\n        } else if (options.sendType === 'json') {\n            xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n        }\n\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    let response = {};\n\n                    try {\n                        response = JSON.parse(xhr.responseText);\n                    } catch (e) {\n                        response.validationErrors = { base: ['JSON parsing error'] };  // todo: language extension\n                    }\n\n                    if (response.validationErrors) {\n                        this.options.callbacks.error(response.validationErrors);\n\n                        if (response.validationErrors.base) {\n                            this.nodes.baseMessage.innerHTML = response.validationErrors.base.join(', ');\n                            this.root.classList.add(this.options.formStatePrefix + this.options.states.error); // eslint-disable-line max-len\n                            this.root.classList.remove(this.options.formStatePrefix + this.options.states.valid); // eslint-disable-line max-len\n                            delete response.validationErrors.base;\n                        } else {\n                            this.nodes.baseMessage.innerHTML = '';\n                        }\n\n                        for (const name in response.validationErrors) {\n                            this.markError(name, response.validationErrors[name]);\n                        }\n                    } else {\n                        this.options.callbacks.success(response);\n\n                        if (this.options.redirect && response.redirect) {\n                            window.location.href = response.redirect;\n                            return;\n                        }\n\n                        if (this.options.clean) {\n                            this.nodes.form.reset();\n                        }\n                    }\n                } else {\n                    console.warn(`${options.method} ${options.url} ${xhr.status} (${xhr.statusText})`);\n\n                    this.nodes.baseMessage.innerHTML = 'Can not send form!'; // todo: language extension\n                    this.root.classList.add(this.options.formStatePrefix + this.options.states.error); // eslint-disable-line max-len\n                    this.root.classList.remove(this.options.formStatePrefix + this.options.states.valid); // eslint-disable-line max-len\n                }\n            }\n        };\n\n        xhr.send(options.method.toUpperCase() === 'POST' ? options.data : '');\n    }\n\n    getData() {\n        let data = '';\n\n        if (this.options.sendType === 'serialize') {\n            for (const name in this.inputs) {\n                data += `${name}=${encodeURIComponent(JediValidate.getInputValue(this.inputs[name]))}&`;\n            }\n\n            data = data.slice(0, -1);\n        } else if (this.options.sendType === 'formData') {\n            data = new FormData();\n\n            for (const name in this.inputs) {\n                if (this.inputs[name].type && this.inputs[name].type === 'file') {\n                    if (this.inputs[name].hasAttribute('multiple')) {\n                        for (let i = 0; i < this.inputs[name].files.length; i++) {\n                            data.append(`${name}[]`, this.inputs[name].files[i]);\n                        }\n                    } else {\n                        data.append(name, this.inputs[name].files[0]);\n                    }\n                } else {\n                    data.append(name, JediValidate.getInputValue(this.inputs[name]));\n                }\n            }\n        } else if (this.options.sendType === 'json') {\n            data = {};\n\n            for (const index in this.nodes.inputs) {\n                const input = this.nodes.inputs[index];\n\n                data = deepmerge(data, JediValidate.parseInputName(input.name, JediValidate.getInputValue(input))); // eslint-disable-line max-len\n            }\n\n            data = JSON.stringify(data);\n        }\n\n        return data;\n    }\n\n    defineRules(name) {\n        const input = this.inputs[name];\n\n        this.rules[name] = {};\n\n        const rules = ['required', 'email', 'tel', 'url'];\n\n        for (const ruleName in rules) {\n            const rule = rules[ruleName];\n\n            if (input.hasAttribute(rule) || input.type === rule || input.classList.contains(rule)) {\n                this.rules[name][rule] = true;\n            }\n        }\n\n        if (input.hasAttribute('pattern')) {\n            this.rules[name].regexp = new RegExp(input.getAttribute('pattern'));\n        }\n\n        if (this.options.rules[name]) {\n            this.rules[name] = deepmerge(this.rules[name], this.options.rules[name]);\n        }\n\n        for (const rule in this.rules[name]) {\n            if (this.rules[name][rule]) {\n                this.fields[name].classList.add(rule);\n            }\n        }\n    }\n\n    checkForm() {\n        const errors = {};\n\n        for (const name in this.rules) {\n            const inputErrors = this.checkInput(name);\n\n            if (inputErrors.length) {\n                errors[name] = inputErrors;\n            }\n        }\n\n        return errors;\n    }\n\n    checkInput(name) {\n        const rules = this.rules[name];\n        const errors = [];\n        const isEmpty = !this.methods.required.func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name]); // eslint-disable-line max-len\n\n        if (isEmpty && rules.required) {\n            errors.push(this.getErrorMessage(name, 'required'));\n        } else if (!isEmpty) {\n            for (const method in rules) {\n                const params = rules[method];\n\n                if (params) {\n                    if (this.methods[method]) {\n                        const valid = this.methods[method].func(JediValidate.getInputValue(this.inputs[name]), this.inputs[name], params); // eslint-disable-line max-len\n\n                        if (!valid) {\n                            errors.push(this.getErrorMessage(name, method));\n                        }\n                    } else {\n                        errors.push(`Method \"${method}\" not found`);\n                    }\n                }\n            }\n        }\n\n        if (errors.length) {\n            this.markError(name, errors);\n        } else {\n            this.markValid(name);\n        }\n\n        return errors;\n    }\n\n    markError(name, errors) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.error);\n        this.fields[name].classList.remove(this.options.states.valid);\n\n        this.messages[name].innerHTML = errors.join(', ');\n    }\n\n    markValid(name) {\n        if (!this.fields[name] || !this.messages[name]) {\n            return;\n        }\n\n        this.fields[name].classList.add(this.options.states.valid);\n        this.fields[name].classList.remove(this.options.states.error);\n\n        this.messages[name].innerHTML = '';\n    }\n\n    getErrorMessage(name, method) {\n        let message = '';\n\n        if (this.options.messages[name] && this.options.messages[name][method]) {\n            message = this.options.messages[name][method];\n        } else {\n            message = this.methods[method].message;\n        }\n\n        return message;\n    }\n\n    addMethod(rule, func, message) {\n        this.methods[rule] = {\n            func,\n            message,\n        };\n    }\n\n    initMethods() {\n        this.methods = {};\n\n        this.addMethod('required', value =>\n            value && value.trim() !== '',\n            translate('This field is required'));\n\n        this.addMethod('regexp', (value, element, regexp) =>\n            regexp.test(value),\n                translate('Please, provide correct value'));\n\n        this.addMethod('email', value =>\n            /[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}/i.test(value),\n            translate('This email is incorrect'));\n\n        this.addMethod('filesize', (value, element, size) =>\n            Array.prototype.slice.call(element.files).reduce((r, file) =>\n                file.size < size && r, true),\n            translate('This file is too large'));\n\n        this.addMethod('extension', (value, element, extensions) =>\n            Array.prototype.slice.call(element.files).reduce((r, file) =>\n                extensions.indexOf(file.name.split('.').pop()) !== -1 && r, true,\n            translate('This extension is not supported')));\n\n        this.addMethod('tel', value =>\n            /^([\\+]+)*[0-9\\x20\\x28\\x29\\-]{5,20}$/.test(value),\n            translate('This phone number is incorrect'));\n\n        this.addMethod('url', value =>\n            /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/gi.test(value) // eslint-disable-line max-len\n        , translate('Wrong url'));\n    }\n}\n\nmodule.exports = JediValidate;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/jedi-validate.es6\n **/","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.deepmerge = factory();\n    }\n}(this, function () {\n\nfunction isMergeableObject(val) {\n    var nonNullObject = val && typeof val === 'object'\n\n    return nonNullObject\n        && Object.prototype.toString.call(val) !== '[object RegExp]'\n        && Object.prototype.toString.call(val) !== '[object Date]'\n}\n\nfunction emptyTarget(val) {\n    return Array.isArray(val) ? [] : {}\n}\n\nfunction cloneIfNecessary(value, optionsArgument) {\n    var clone = optionsArgument && optionsArgument.clone === true\n    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value\n}\n\nfunction defaultArrayMerge(target, source, optionsArgument) {\n    var destination = target.slice()\n    source.forEach(function(e, i) {\n        if (typeof destination[i] === 'undefined') {\n            destination[i] = cloneIfNecessary(e, optionsArgument)\n        } else if (isMergeableObject(e)) {\n            destination[i] = deepmerge(target[i], e, optionsArgument)\n        } else if (target.indexOf(e) === -1) {\n            destination.push(cloneIfNecessary(e, optionsArgument))\n        }\n    })\n    return destination\n}\n\nfunction mergeObject(target, source, optionsArgument) {\n    var destination = {}\n    if (isMergeableObject(target)) {\n        Object.keys(target).forEach(function (key) {\n            destination[key] = cloneIfNecessary(target[key], optionsArgument)\n        })\n    }\n    Object.keys(source).forEach(function (key) {\n        if (!isMergeableObject(source[key]) || !target[key]) {\n            destination[key] = cloneIfNecessary(source[key], optionsArgument)\n        } else {\n            destination[key] = deepmerge(target[key], source[key], optionsArgument)\n        }\n    })\n    return destination\n}\n\nfunction deepmerge(target, source, optionsArgument) {\n    var array = Array.isArray(source);\n    var options = optionsArgument || { arrayMerge: defaultArrayMerge }\n    var arrayMerge = options.arrayMerge || defaultArrayMerge\n\n    if (array) {\n        return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)\n    } else {\n        return mergeObject(target, source, optionsArgument)\n    }\n}\n\nreturn deepmerge\n\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/deepmerge/index.js\n ** module id = 1\n ** module chunks = 0 1\n **/","const dictionary = require('./jedi-validate-i18n-data.json');\n\nlet currentLang = 'en';\n\nexport function setLanguage(id) {\n    currentLang = id;\n}\n\nexport function translate(text, lang = currentLang) {\n    return (dictionary[lang] && dictionary[lang][text]) || text;\n}\n\nexport function addTranslation(sourceText, translatedText, lang = currentLang) {\n    if (dictionary[lang] === undefined) {\n        dictionary[lang] = {};\n    }\n    dictionary[lang][sourceText] = translatedText;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/i18n/jedi-validate-i18n.es6\n **/","module.exports = {\n\t\"ru\": {\n\t\t\"This field is required\": \"Это поле необходимо заполнить\",\n\t\t\"Please, provide correct value\": \"Пожалуйста, введите корректное значение\",\n\t\t\"This email is incorrect\": \"Пожалуйста, введите корректный адрес электронной почты\",\n\t\t\"This file is too large\": \"Попробуйте загрузить файл поменьше\",\n\t\t\"This extension is not supported\": \"Пожалуйста, выберите файл с правильным расширением\",\n\t\t\"This phone number is incorrect\": \"Не корректный номер телефона\",\n\t\t\"Wrong url\": \"Не корректный url\"\n\t}\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/i18n/jedi-validate-i18n-data.json\n ** module id = 3\n ** module chunks = 0 1\n **/"],"sourceRoot":""}